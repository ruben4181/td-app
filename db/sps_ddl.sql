CREATE DEFINER=`root`@`localhost` PROCEDURE `tiendapp`.`SP_BILLS_ADD_PRODUCT_TO_BILL`(nIdBill INT UNSIGNED, nIdProduct INT UNSIGNED, 
	nUnits INT UNSIGNED, vDescription VARCHAR(200), nOff INT)
BEGIN
	DECLARE actualPrice BIGINT UNSIGNED DEFAULT 0;
	DECLARE nPrice BIGINT UNSIGNED DEFAULT 0;
	DECLARE nAmmount BIGINT UNSIGNED DEFAULT 0;
	DECLARE nCost BIGINT UNSIGNED DEFAULT 0;
	DECLARE nIdStatus INT UNSIGNED DEFAULT 0;
	SELECT B.ID_STATUS INTO nIdStatus FROM BILLS B WHERE B.ID_BILL = nIdBill;
	IF nIdStatus = nIdStatus THEN
		SELECT ROUND((1-nOff/100)*P.PRODUCT_PRICE), P.PRODUCT_COST, P.PRODUCT_PRICE INTO nPrice, nCost, actualPrice FROM PRODUCTS P WHERE P.ID_PRODUCT = nIdProduct;
		SELECT B.AMMOUNT INTO nAmmount FROM BILLS B WHERE B.ID_BILL = nIdBill;
		START TRANSACTION;
		UPDATE BILLS B SET B.AMMOUNT = (nAmmount + (nPrice*nUnits)) WHERE B.ID_BILL = nIdBill;
		COMMIT;
		INSERT INTO BILLS_DETAIL(ID_BILL_DETAIL, ID_BILL, ID_PRODUCT, PRICE, FINAL_PRICE, COST, UNITS, OFF, DESCRIPTION) VALUES
			(NULL, nIdBill, nIdProduct, actualPrice, nPrice, nCost, nUnits, nOff,vDescription);
		START TRANSACTION;
		UPDATE PRODUCTS P SET P.PRODUCT_STOCK = P.PRODUCT_STOCK - nUnits WHERE P.ID_PRODUCT = nIdProduct;
		CALL SP_BILLS_CALC_AMMOUNT(nIdBill);
		COMMIT;
		SELECT 0 AS ERROR, 'Product added to bill sucessfuly' AS MESSAGE FROM DUAL;
	ELSE
		SELECT 1 AS ERROR, 'Factura no estÃ¡ abierta' AS MESSAGE FROM DUAL;
	END IF;
END;

CREATE DEFINER=`root`@`localhost` PROCEDURE `tiendapp`.`SP_BILLS_CALC_AMMOUNT`(nIdBill INT UNSIGNED)
BEGIN
	DECLARE nTotal INT UNSIGNED DEFAULT 0;
	SELECT SUM(FINAL_PRICE * UNITS) INTO nTotal FROM BILLS_DETAIL BD WHERE BD.ID_BILL = nIdBill;
	UPDATE BILLS B SET B.AMMOUNT = nTotal WHERE ID_BILL = nIdBill;
END;

CREATE DEFINER=`root`@`localhost` PROCEDURE `tiendapp`.`SP_BILLS_CHANGE_STATUS`(nIdBill INT UNSIGNED, nIdStatus INT UNSIGNED)
BEGIN
	UPDATE BILLS SET ID_STATUS = nIdStatus WHERE ID_BILL = nIdBill;
	CALL SP_BILLS_CALC_AMMOUNT(nIdBill);
	COMMIT;
	SELECT 0 AS ERROR, CONCAT('Estado de factura cambiado a ', PS.DESCRIPTION, ' - ', PS.CODE) AS MESSAGE FROM PAR_STATUS PS WHERE PS.ID_STATUS = nIdStatus;
END;

CREATE DEFINER=`root`@`localhost` PROCEDURE `tiendapp`.`SP_BILLS_CREATE_BILL`(nIdStore INT UNSIGNED, vCustomerId VARCHAR(50),
	vCustomerName VARCHAR(100), vCustomerPhone VARCHAR(15),
	vCustomerAddress VARCHAR(200))
BEGIN
	DECLARE vCode VARCHAR(70) DEFAULT '';
	SELECT ROUND(UNIX_TIMESTAMP(CURTIME(4)) * 1000) INTO vCode FROM DUAL;
	SET vCode = CONCAT(vCode, vCustomerId);
	INSERT INTO BILLS(ID_BILL, CUSTOMER_ID, CUSTOMER_NAME, CUSTOMER_PHONE, CUSTOMER_ADDRESS, AMMOUNT, CREATED_AT, ID_STATUS, CODE, ID_STORE) VALUES
	(NULL, vCustomerId, vCustomerName, vCustomerPhone, vCustomerAddress, 0, CURRENT_TIMESTAMP(), 9, vCode, nIdStore);
	COMMIT;
	SELECT 0 AS ERROR, 'BILL CREATED SUCCESFULY' AS MESSAGE, ID_BILL, CODE FROM BILLS WHERE CODE = vCode;
END;

CREATE DEFINER=`root`@`localhost` PROCEDURE `tiendapp`.`SP_BILLS_DEL_PRODUCT_FROM_BILL`(nIdBill INT UNSIGNED, nIdBillDetail INT UNSIGNED)
BEGIN
	DECLARE nUnits INT UNSIGNED DEFAULT 0;
	DECLARE nIdProduct INT UNSIGNED DEFAULT 0;
	DECLARE nPrice INT UNSIGNED DEFAULT 0;
	DECLARE nAmmount INT UNSIGNED DEFAULT 0;

	SELECT BD.UNITS, BD.ID_PRODUCT, BD.PRICE INTO nUnits, nIdProduct, nPrice FROM BILLS_DETAIL BD WHERE ID_BILL = nIdBill AND ID_BILL_DETAIL = nIdBillDetail;
	DELETE FROM BILLS_DETAIL BD WHERE BD.ID_BILL_DETAIL = nIdBillDetail;
	COMMIT;

	SET nAmmount = nPrice * nUnits;
	UPDATE BILLS B SET B.AMMOUNT = B.AMMOUNT - nAmmount WHERE ID_BILL = nIdBill;
	UPDATE PRODUCTS P SET P.PRODUCT_STOCK = P.PRODUCT_STOCK + nUnits WHERE P.ID_PRODUCT = nIdProduct;
	COMMIT;
	SELECT 0 AS ERROR, 'Producto elimindado correctamente de la factura' AS MESSAGE FROM DUAL;
END;

CREATE DEFINER=`root`@`localhost` PROCEDURE `tiendapp`.`SP_BILLS_FIND_BILL`(nIdStore INT UNSIGNED, vQuery VARCHAR(100))
BEGIN
	SELECT * FROM BILLS B WHERE B.ID_STORE = nIdStore AND (UPPER(B.CODE) LIKE CONCAT('%', UPPER(vQuery), '%')
	OR UPPER(B.CUSTOMER_NAME) LIKE CONCAT('%', UPPER(vQuery), '%') OR UPPER(B.CUSTOMER_PHONE) LIKE CONCAT('%', UPPER(vQuery), '%')
	OR UPPER(B.CUSTOMER_ID) LIKE CONCAT('%', UPPER(vQuery), '%')) LIMIT 10;
END;

CREATE DEFINER=`root`@`localhost` PROCEDURE `tiendapp`.`SP_BILLS_GET_BILL`(nIdStore INT UNSIGNED, nIdBill INT UNSIGNED)
BEGIN
	SELECT B.*, PS.DESCRIPTION AS ESTADO FROM BILLS B INNER JOIN PAR_STATUS PS ON PS.ID_STATUS = B.ID_STATUS WHERE B.ID_STORE = nIdStore AND B.ID_BILL = nIdBill LIMIT 1;
END;

CREATE DEFINER=`root`@`localhost` PROCEDURE `tiendapp`.`SP_BILLS_GET_BILL_DETAIL`(nIdStore INT UNSIGNED, nIdBill INT UNSIGNED)
BEGIN
	SELECT P.PRODUCT_NAME, BD.ID_BILL_DETAIL, BD.ID_BILL, BD.ID_PRODUCT, P.PRODUCT_PRICE AS PRICE, BD.COST, BD.UNITS, BD.OFF, BD.DESCRIPTION
FROM BILLS_DETAIL BD INNER JOIN BILLS B ON B.ID_BILL = BD.ID_BILL INNER JOIN PRODUCTS P ON P.ID_PRODUCT = BD.ID_PRODUCT WHERE BD.ID_BILL = nIdBill;
END;

CREATE DEFINER=`root`@`localhost` PROCEDURE `tiendapp`.`SP_BILLS_GET_BY_STORE`(
								nIdStore INT UNSIGNED,
								nPage INT UNSIGNED,
								vQuery VARCHAR(200),
								STARTS VARCHAR(50),
								ENDS VARCHAR(50))
BEGIN
	DECLARE nOffset INT DEFAULT 0;
	DECLARE nMaxProducts INT DEFAULT 20;

	SET nOffset = nMaxProducts * (nPage-1);

	SELECT * FROM BILLS B WHERE B.ID_STORE = nIdStore AND B.ID_STATUS = 4
	AND (vQuery IS NULL OR (vQuery IS NOT NULL AND (
		LOWER(B.CUSTOMER_ID) LIKE CONCAT('%', LOWER(vQuery), '%') OR
		LOWER(B.CUSTOMER_NAME) LIKE CONCAT('%', LOWER(vQuery), '%') OR
		LOWER(B.CUSTOMER_PHONE) LIKE CONCAT('%', LOWER(vQuery), '%') OR
		LOWER(B.CODE) LIKE CONCAT('%', LOWER(vQuery), '%')
	)))

	AND ( STARTS IS NULL OR (STARTS IS NOT NULL AND DATE(B.CREATED_AT) >= DATE(STR_TO_DATE(STARTS, '%Y-%m-%d')) ) )

	AND ( ENDS IS NULL OR (ENDS IS NOT NULL AND DATE(B.CREATED_AT) <= DATE(STR_TO_DATE(ENDS, '%Y-%m-%d')) ) )

	ORDER BY B.CREATED_AT DESC LIMIT nOffset, nMaxProducts;

	IF vQuery IS NOT NULL OR STARTS IS NOT NULL OR ENDS IS NOT NULL THEN
		SELECT nPage AS ACTUAL_PAGE, FLOOR(COUNT(*)/nMaxProducts)+1 AS LAST_PAGE, COUNT(*) AS TOTAL_COUNT, SUM(B.AMMOUNT) AS AMMOUNT FROM BILLS B WHERE B.ID_STORE = nIdStore AND B.ID_STATUS = 4
		AND (vQuery IS NULL OR (vQuery IS NOT NULL AND (
			LOWER(B.CUSTOMER_ID) LIKE CONCAT('%', LOWER(vQuery), '%') OR
			LOWER(B.CUSTOMER_NAME) LIKE CONCAT('%', LOWER(vQuery), '%') OR
			LOWER(B.CUSTOMER_PHONE) LIKE CONCAT('%', LOWER(vQuery), '%') OR
			LOWER(B.CODE) LIKE CONCAT('%', LOWER(vQuery), '%')
		)))
		AND ( STARTS IS NULL OR (STARTS IS NOT NULL AND DATE(B.CREATED_AT) >= DATE(STR_TO_DATE(STARTS, '%Y-%m-%d')) ) )
		AND ( ENDS IS NULL OR (ENDS IS NOT NULL AND DATE(B.CREATED_AT) <= DATE(STR_TO_DATE(ENDS, '%Y-%m-%d')) ) );
	ELSE
		SELECT nPage AS ACTUAL_PAGE, FLOOR(COUNT(*)/nMaxProducts)+1 AS LAST_PAGE, COUNT(*) AS TOTAL_COUNT, -1 AS AMMOUNT FROM BILLS B WHERE B.ID_STORE = nIdStore AND B.ID_STATUS = 4
		AND (vQuery IS NULL OR (vQuery IS NOT NULL AND (
			LOWER(B.CUSTOMER_ID) LIKE CONCAT('%', LOWER(vQuery), '%') OR
			LOWER(B.CUSTOMER_NAME) LIKE CONCAT('%', LOWER(vQuery), '%') OR
			LOWER(B.CUSTOMER_PHONE) LIKE CONCAT('%', LOWER(vQuery), '%') OR
			LOWER(B.CODE) LIKE CONCAT('%', LOWER(vQuery), '%')
		)))
		AND ( STARTS IS NULL OR (STARTS IS NOT NULL AND DATE(B.CREATED_AT) >= DATE(STR_TO_DATE(STARTS, '%Y-%m-%d')) ) )
		AND ( ENDS IS NULL OR (ENDS IS NOT NULL AND DATE(B.CREATED_AT) <= DATE(STR_TO_DATE(ENDS, '%Y-%m-%d')) ) );
	END IF;
END;

CREATE DEFINER=`root`@`localhost` PROCEDURE `tiendapp`.`SP_BILLS_GET_OPEN_BILLS`(nIdStore INT UNSIGNED, nPage INT UNSIGNED)
BEGIN
	DECLARE nOffset INT DEFAULT 0;
	DECLARE nMaxProducts INT DEFAULT 20;

	SET nOffset = nMaxProducts * (nPage - 1);

	SELECT * FROM BILLS B WHERE B.ID_STATUS = 9 AND B.ID_STORE = nIdStore LIMIT nOffset, nMaxProducts;
	SELECT nPage AS ACTUAL_PAGE, FLOOR(COUNT(*)/nMaxProducts)+1 AS LAST_PAGE, COUNT(*) AS TOTAL_COUNT FROM BILLS B WHERE B.ID_STORE = nIdStore AND B.ID_STATUS = 9;
END;

CREATE DEFINER=`root`@`localhost` PROCEDURE `tiendapp`.`SP_BILLS_UPDATE_PRODUCT_FROM_BILL`(nIdBill INT UNSIGNED,
	nIdBillDetail INT UNSIGNED, nUnits INT UNSIGNED, vDescription VARCHAR(200), nOff DOUBLE)
BEGIN
	DECLARE nActualUnits INT UNSIGNED DEFAULT 0;
	DECLARE nActualAmmount INT UNSIGNED DEFAULT 0;
	DECLARE nPrice INT UNSIGNED DEFAULT 0;
	DECLARE nDiff INT UNSIGNED DEFAULT 0;
	DECLARE nIdProduct INT UNSIGNED DEFAULT 0;
	DECLARE nActualPrice INT UNSIGNED DEFAULT 0;
	DECLARE nActualFinalPrice INT UNSIGNED DEFAULT 0;
	DECLARE nActualOff INT DEFAULT 0;
	DECLARE nActualTotal INT UNSIGNED DEFAULT 0;

	SELECT B.AMMOUNT, BD.PRICE, BD.UNITS, BD.OFF, BD.FINAL_PRICE, BD.ID_PRODUCT  INTO nActualAmmount, nActualPrice,
	nActualUnits, nActualOff, nActualFinalPrice, nIdProduct
	FROM BILLS_DETAIL BD INNER JOIN BILLS B ON B.ID_BILL = BD.ID_BILL WHERE BD.ID_BILL_DETAIL = nIdBillDetail;
	SET nActualTotal := nActualFinalPrice * nActualUnits;
	/*UPDATE BILLS B SET B.AMMOUNT = (nActualAmmount - nActualTotal) + ROUND(nActualPrice * (1-nOff/100) * nUnits) WHERE B.ID_BILL = nIdBill;*/
	UPDATE BILLS_DETAIL BD SET BD.FINAL_PRICE = ROUND(nActualPrice * (1-nOff/100)), BD.UNITS = nUnits, BD.OFF = nOff,
	BD.DESCRIPTION = vDescription
	WHERE BD.ID_BILL_DETAIL = nIdBillDetail;
	UPDATE PRODUCTS P SET P.PRODUCT_STOCK = P.PRODUCT_STOCK + (nActualUnits - nUnits) WHERE P.ID_PRODUCT = nIdProduct;
	COMMIT;

	SELECT 0 AS ERROR, 'Factura actualizada correctamente' AS MESSAGE FROM DUAL;
END;

CREATE DEFINER=`root`@`localhost` PROCEDURE `tiendapp`.`SP_CATEGORIES_GET_BY_PARENT`(IN  idCategoryParent 	INT,
											 OUT nError				INT,
											 OUT vMessage			VARCHAR(100))
BEGIN
	SELECT C.ID_CATEGORY, C.CATEGORY_NAME, C.CATEGORY_DESCRIPTION, C.ID_CATEGORY_PARENT, C.ID_STORE, C.MONGO_ID, C.IMG_SRC
	FROM CATEGORIES C WHERE (idCategoryParent IS NOT NULL AND C.ID_CATEGORY_PARENT = idCategoryParent) OR (idCategoryParent IS NULL AND C.ID_CATEGORY_PARENT IS NULL);
	SET nError = 0;
	SET vMessage = 'FETCH';
END;

CREATE DEFINER=`root`@`localhost` PROCEDURE `tiendapp`.`SP_CATEGORIES_GET_BY_STORE`(IN  nIdStore	INT,
											OUT nError		INT,
											OUT vMessage	VARCHAR(200))
BEGIN
	SELECT C.ID_CATEGORY, C.CATEGORY_NAME, C.CATEGORY_DESCRIPTION, C.ID_CATEGORY_PARENT, C.ID_STORE, C.MONGO_ID, C.IMG_SRC
		FROM CATEGORIES C WHERE C.ID_STORE = nIdStore AND C.ID_CATEGORY_PARENT IS NULL;
	SET nError = 0;
	SET vMessage = 'FETCH';
END;

CREATE DEFINER=`root`@`localhost` PROCEDURE `tiendapp`.`SP_CATEGORIES_GET_BY_STORE_ALL`(IN  nIdStore	INT,
											OUT nError		INT,
											OUT vMessage	VARCHAR(200))
BEGIN
	SELECT C.ID_CATEGORY, C.CATEGORY_NAME, C.CATEGORY_DESCRIPTION, C.ID_CATEGORY_PARENT, C.ID_STORE, C.MONGO_ID, C.IMG_SRC
		FROM CATEGORIES C WHERE C.ID_STORE = nIdStore;
	SET nError = 0;
	SET vMessage = 'FETCH';
END;

CREATE DEFINER=`root`@`localhost` PROCEDURE `tiendapp`.`SP_CATEGORIES_GET_COMMONS`(OUT nError	INT,
										   OUT vMessage VARCHAR(100))
BEGIN
	SELECT C.ID_CATEGORY, C.CATEGORY_NAME, C.CATEGORY_DESCRIPTION, C.ID_CATEGORY_PARENT, C.ID_STORE, C.MONGO_ID, C.IMG_SRC FROM CATEGORIES C WHERE C.ID_STORE IS NULL;
	SET nError = 0;
	SET vMessage = 'FETCH';
END;

CREATE DEFINER=`root`@`localhost` PROCEDURE `tiendapp`.`SP_CATEGORIES_INSERT`(IN  vCategoryName			VARCHAR(200),
									  IN  vCategoryDescription	TEXT,
									  IN  nIdCategoryParent		INT,
									  IN  nIdStore				INT,
									  IN  vMongoId				VARCHAR(24),
									  IN  vImgSrc				VARCHAR(500),
									  OUT nError				INT,
									  OUT vMessage				VARCHAR(100))
BEGIN
	DECLARE nRowCount INT DEFAULT 0;
	SELECT COUNT(*) INTO nRowCount FROM CATEGORIES C WHERE (nIdStore IS NOT NULL AND C.ID_STORE = nIdStore) AND LOWER(C.CATEGORY_NAME) = LOWER(vCategoryName);
	IF(nRowCount>0) THEN
		SET nError = 1;
		SET vMessage = 'Category already exists';
	ELSE
		INSERT INTO CATEGORIES(CATEGORY_NAME, CATEGORY_DESCRIPTION, ID_CATEGORY_PARENT, ID_STORE, MONGO_ID, IMG_SRC)
			VALUES (vCategoryName, vCategoryDescription, nIdCategoryParent,nIdStore, vMongoId, vImgSrc);
		SET nError = 0;
		SET vMessage = 'Category added correctly';
	END IF;
	SELECT nError AS ERROR, vMessage AS MESSAGE;
END;

CREATE DEFINER=`root`@`localhost` PROCEDURE `tiendapp`.`SP_CATEGORIES_UPDATE`(IN  nIdCategory 			INT,
									  IN  vCategoryName 		VARCHAR(200),
									  IN  vCategoryDescription 	TEXT,
									  IN  nIdParent				INT,
									  IN  vImgSrc				VARCHAR(500),
									  OUT nError				INT,
									  OUT vMessage 				VARCHAR(100))
BEGIN
	DECLARE nRowCount INT DEFAULT 0;
	SELECT COUNT(*) INTO nRowCount FROM CATEGORIES C WHERE C.ID_CATEGORY = nIdCategory;
	IF nRowCount > 0 THEN
		UPDATE CATEGORIES C SET CATEGORY_NAME = IFNULL(vCategoryName, C.CATEGORY_NAME),
			C.CATEGORY_DESCRIPTION = IFNULL(vCategoryDescription, C.CATEGORY_DESCRIPTION), C.ID_CATEGORY_PARENT = IFNULL(nIdParent, C.ID_CATEGORY_PARENT),
			C.IMG_SRC = IFNULL(vImgSrc, C.IMG_SRC)
			WHERE ID_CATEGORY = nIdCategory;
		SET nError = 0;
		SET vMessage = 'Category updated correctly';
	ELSE
		SET nError = 1;
		SET vMessage = 'Category does not exits';
	END IF;
	SELECT nError AS ERROR, vMessage AS MESSAGE;
END;

CREATE DEFINER=`root`@`localhost` PROCEDURE `tiendapp`.`SP_COSTS_ADD_COST`(
	nIdStore INT UNSIGNED,
	nIdCostCategory INT UNSIGNED,
	nAmmount INT,
	vRefCobro VARCHAR(200),
	vRefPago VARCHAR(200),
	nIdTipoPago INT UNSIGNED,
	vDescription VARCHAR(500),
	nIdStatus INT UNSIGNED)
BEGIN
	DECLARE nTmp INT DEFAULT 0;

	INSERT INTO COSTS(ID_STORE, ID_COST_CATEGORY, AMMOUNT, REF_COBRO, REF_PAGO, ID_TIPO_PAGO,
	DESCRIPTION, ID_STATUS) VALUES(nIdStore, nIdCostCategory, nAmmount, vRefCobro, vRefPago, nIdTipoPago,
	vDescription, nIdStatus);

	SELECT ROW_COUNT() INTO nTmp FROM DUAL;
	IF nTmp > 0 THEN
		COMMIT;
		SELECT 0 AS ERROR, 'Costo creado correctamente' AS MESSAGE, ID_BILL, CODE FROM BILLS WHERE CODE = vCode;
	ELSE
		SELECT 1 AS ERROR, 'No se pudo creear el costo' AS MESSAGE, ID_BILL, CODE FROM BILLS WHERE CODE = vCode;
	END IF;
END;

CREATE DEFINER=`root`@`localhost` PROCEDURE `tiendapp`.`SP_COSTS_DEL_COST`(nIdStore INT UNSIGNED, nIdCost INT UNSIGNED)
BEGIN
	DECLARE nTmp INT DEFAULT 0;
	SELECT 1 FROM COSTS C WHERE C.ID_COST = nIdCost AND C.idStore = nIdStore;
	IF nTmp = 1 THEN
		DELETE FROM COSTS C WHERE C.ID_COST = nIdCost AND C.idStore = nIdStore;
		COMMIT;

		SELECT ROW_COUNT() INTO nTmp FROM DUAL;

		IF nTmp > 0 THEN
			SELECT 0 AS ERROR, 'OK' AS `RESULT`, 'Costo eliminado exitosamente' AS MESSAGE FROM DUAL;
		ELSE
			SELECT 2 AS ERROR, 'FAIL' AS `RESULT`, 'No se eliminÃ³ nada' AS MESSAGE FROM DUAL;
		END IF;
	ELSE
		SELECT 1 AS ERROR, 'FAIL' AS `RESULT`, 'Costo no existe' AS MESSAGE FROM DUAL;
	END IF;
END;

CREATE DEFINER=`root`@`localhost` PROCEDURE `tiendapp`.`SP_COSTS_UPDATE_COST`(nIdStore INT UNSIGNED, nIdCost INT UNSIGNED, nIdCostCategory INT UNSIGNED,
nAmmount INT, vRefCobro VARCHAR(200), vRefPago VARCHAR(200), nIdTipoPago INT UNSIGNED,
vDescription VARCHAR(500), nIdStatus INT UNSIGNED)
BEGIN
	DECLARE nTemp INT DEFAULT 0;
	SELECT 1 INTO nTemp FROM COSTS C WHERE C.ID_STORE = nIdStore AND C.ID_COST = nIdCost;

	IF nTemp = 1 THEN
		UPDATE COSTS C SET
			C.ID_COST_CATEGORY = IFNULL(nIdCostCategory, C.ID_COST_CATEGORY),
			C.AMMOUNT = IFNULL(nAmmount, C.AMMOUNT),
			C.REF_COBRO = IFNULL(vRefCobro, C.REF_COBRO),
			C.REF_PAGO = IFNULL(vRefPago, C.REF_PAGO),
			C.ID_TIPO_PAGO = IFNULL(nIdTipoPago, C.ID_TIPO_PAGO),
			C.DESCRIPTION = IFNULL(vDescription, C.DESCRIPTION),
			C.ID_STATUS = IFNULL(nIdStatus, C.ID_STATUS),
			C.UPDATED_AT = CURRENT_TIMESTAMP()
		WHERE
		C.ID_STORE = nIdStore AND C.ID_COST = nIdCost;
		SELECT ROW_COUNT() INTO nTemp FROM DUAL;
		IF nTemp > 0 THEN
			SELECT 0 AS ERROR, 'OK' AS `RESULT`, 'Costo actualizdo correctamente' AS MESSAGE FROM DUAL;
		ELSE
			SELECT 2 AS ERROR, 'FAIL' AS `RESULT`, 'No se actualizÃ³ nada' AS MESSAGE FROM DUAL;
		END IF;
	ELSE
		SELECT 1 AS ERROR, 'FAIL' AS `RESULT`, 'Costo no encontrado' AS MESSAGE FROM DUAL;
	END IF;
END;

CREATE DEFINER=`root`@`localhost` PROCEDURE `tiendapp`.`SP_GET_STORES_BY_USER`(IN  nIdUser	VARCHAR(100),
										 OUT nError		INT,
										 OUT vMessage	VARCHAR(100))
BEGIN
	DECLARE nRowCount INT DEFAULT 0;

	SELECT * FROM STORES S INNER JOIN USERS_STORES US ON (S.ID_STORE = US.ID_STORE) WHERE US.ID_USER = nIdUser AND S.ACTIVO = 1;
	SELECT FOUND_ROWS() INTO nRowCount;
	IF(nRowCount>0) THEN
		SET nError = 0;
		SET vMessage = 'Has roles';
	ELSE
		SET nError = 1;
		SET vMessage = 'Has not roles';
	END IF;
END;

CREATE DEFINER=`root`@`localhost` PROCEDURE `tiendapp`.`SP_PRODUCTS_DELETE`(IN nIdStore INT UNSIGNED, IN nIdProduct INT UNSIGNED,
											   OUT nError INT, OUT vMessage VARCHAR(100))
BEGIN
	DECLARE nRowCount INT DEFAULT  0;
	SELECT COUNT(*) INTO nRowCount FROM PRODUCTS P WHERE P.ID_PRODUCT = nIdProduct AND P.ID_STORE = nIdStore;

	IF nRowCount > 0 THEN
		UPDATE PRODUCTS P SET P.ACTIVE = 0 WHERE P.ID_PRODUCT = nIdProduct AND P.ID_STORE = nIdStore;
		SET nError = 0;
		SET vMessage = 'Product delete succesfuly';
	ELSE
		SET nError = 1;
		SET vMessage = 'Nothing to delete';
	END IF;
	SELECT nError AS ERROR, vMessage AS MESSAGE;
END;

CREATE DEFINER=`root`@`localhost` PROCEDURE `tiendapp`.`SP_PRODUCTS_FIND_PRODUCTS`(IN  nIdStore		INT UNSIGNED,
										   IN  vSearchInput VARCHAR(200),
										   IN  nStockAlert 	INT,
										   OUT nError 		INT,
										   OUT vMessage		VARCHAR(100))
BEGIN
	SELECT P.ID_PRODUCT, P.PRODUCT_NAME, P.PRODUCT_LINE, P.PRODUCT_DESCRIPTION, P.PRODUCT_BRAND, P.PRODUCT_QUANTITY,
	P.PRODUCT_PRICE, P.PRODUCT_COST, P.PRODUCT_STOCK, P.STOCK_ALERT, P.PRODUCT_OFF, P.PRODUCT_CODE, P.ID_STORE, P.ID_CATEGORY,
	P.MONGO_ID, P.ACTIVE, P.IMG_SRC FROM PRODUCTS P WHERE P.ACTIVE = 1 AND (nStockAlert = 0 OR (P.PRODUCT_STOCK <= P.STOCK_ALERT AND P.ACTIVE = 1))
	AND (LOWER(P.PRODUCT_NAME) LIKE CONCAT('%', LOWER(vSearchInput), '%')
	OR LOWER(P.PRODUCT_CODE) = LOWER(vSearchInput)
	OR LOWER(P.PRODUCT_BRAND) LIKE CONCAT('%', LOWER(vSearchInput), '%'))
	AND P.ID_STORE = nIdStore
	UNION
	SELECT P.ID_PRODUCT, P.PRODUCT_NAME, P.PRODUCT_LINE, P.PRODUCT_DESCRIPTION, P.PRODUCT_BRAND, P.PRODUCT_QUANTITY,
	P.PRODUCT_PRICE, P.PRODUCT_COST, P.PRODUCT_STOCK, P.STOCK_ALERT, P.PRODUCT_OFF, P.PRODUCT_CODE, P.ID_STORE, P.ID_CATEGORY,
	P.MONGO_ID, P.ACTIVE, P.IMG_SRC FROM (
		SELECT *,
	       MATCH (PRODUCT_NAME, PRODUCT_BRAND) AGAINST (vSearchInput IN BOOLEAN MODE) AS RELEVANCE
		   FROM PRODUCTS WHERE ID_STORE = nIdStore AND ACTIVE = 1 HAVING RELEVANCE > 0 ORDER BY RELEVANCE DESC LIMIT 20
	) P
	WHERE (nStockAlert = 0 OR (P.PRODUCT_STOCK <= P.STOCK_ALERT AND P.ACTIVE = 1));
	SET nError = 0;
	SET vMessage = 'FETCH';
END;

CREATE DEFINER=`root`@`localhost` PROCEDURE `tiendapp`.`SP_PRODUCTS_FIND_PRODUCTS_BY_CATEGORY`(IN  nIdStore		INT UNSIGNED,
										   IN nIdCategory 	INT UNSIGNED,
										   IN  vSearchInput VARCHAR(200),
										   IN  nStockAlert  INT,
										   OUT nError 		INT,
										   OUT vMessage		VARCHAR(100))
BEGIN
	SELECT P.ID_PRODUCT, P.PRODUCT_NAME, P.PRODUCT_LINE, P.PRODUCT_DESCRIPTION, P.PRODUCT_BRAND, P.PRODUCT_QUANTITY,
	P.PRODUCT_PRICE, P.PRODUCT_COST, P.PRODUCT_STOCK, P.STOCK_ALERT, P.PRODUCT_OFF, P.PRODUCT_CODE, P.ID_STORE, P.ID_CATEGORY,
	P.MONGO_ID, P.ACTIVE, P.IMG_SRC FROM PRODUCTS P
	WHERE P.ACTIVE = 1 AND
	(
	LOWER(P.PRODUCT_NAME) LIKE CONCAT('%', vSearchInput, '%')
	OR LOWER(P.PRODUCT_CODE) = LOWER(vSearchInput)
	OR P.PRODUCT_BRAND LIKE CONCAT('%', vSearchInput, '%')
	)
	AND
	(P.ID_CATEGORY IN (SELECT ID_CATEGORY FROM CATEGORIES C WHERE C.ID_CATEGORY_PARENT = nIdCategory)
	OR P.ID_CATEGORY IN (SELECT ID_CATEGORY FROM CATEGORIES C2 WHERE C2.ID_CATEGORY_PARENT IN (SELECT ID_CATEGORY FROM CATEGORIES C WHERE C.ID_CATEGORY_PARENT = nIdCategory))
	OR P.ID_CATEGORY = nIdCategory)
	AND (nStockAlert = 0 OR (P.PRODUCT_STOCK <= P.STOCK_ALERT))
	UNION
	SELECT P.ID_PRODUCT, P.PRODUCT_NAME, P.PRODUCT_LINE, P.PRODUCT_DESCRIPTION, P.PRODUCT_BRAND, P.PRODUCT_QUANTITY,
	P.PRODUCT_PRICE, P.PRODUCT_COST, P.PRODUCT_STOCK, P.STOCK_ALERT, P.PRODUCT_OFF, P.PRODUCT_CODE, P.ID_STORE, P.ID_CATEGORY,
	P.MONGO_ID, P.ACTIVE, P.IMG_SRC FROM(
	SELECT *,
       MATCH (PRODUCT_NAME, PRODUCT_BRAND) AGAINST (vSearchInput IN BOOLEAN MODE) AS RELEVANCE
	   FROM PRODUCTS P WHERE ID_STORE = nIdStore AND ACTIVE = 1 AND
	   ID_CATEGORY = nIdCategory OR
	   (P.ID_CATEGORY IN (SELECT ID_CATEGORY FROM CATEGORIES C WHERE C.ID_CATEGORY_PARENT = nIdCategory)
		OR P.ID_CATEGORY IN (SELECT ID_CATEGORY FROM CATEGORIES C2 WHERE C2.ID_CATEGORY_PARENT IN (SELECT ID_CATEGORY FROM CATEGORIES C WHERE C.ID_CATEGORY_PARENT = nIdCategory)))
		HAVING RELEVANCE > 0
	   ORDER BY RELEVANCE DESC LIMIT 20
	) P
	WHERE (nStockAlert = 0 OR (P.PRODUCT_STOCK <= P.STOCK_ALERT));
	SET nError = 0;
	SET vMessage = 'FETCH';
END;

CREATE DEFINER=`root`@`localhost` PROCEDURE `tiendapp`.`SP_PRODUCTS_GET_BY_CATEGORY`(IN  nIdStore		INT,
											 IN  nIdCategory 	INT,
											 IN  nPage			INT,
											 IN  nStockAlert	INT,
											 OUT nError			INT,
											 OUT vMessage		VARCHAR(100))
BEGIN
	DECLARE nRowCount INT DEFAULT 0;
	DECLARE nOffset INT DEFAULT 0;
	DECLARE nMaxProducts INT DEFAULT 10;
	DECLARE count1 INT DEFAULT 0;
	DECLARE count2 INT DEFAULT 0;

	SET nOffset = nMaxProducts * (nPage-1);

	SELECT P.ID_PRODUCT, P.PRODUCT_NAME, P.PRODUCT_LINE, P.PRODUCT_DESCRIPTION, P.PRODUCT_BRAND,
		P.PRODUCT_QUANTITY, P.PRODUCT_PRICE, P.PRODUCT_COST, P.PRODUCT_STOCK, P.STOCK_ALERT, P.PRODUCT_OFF, P.PRODUCT_CODE,
		P.ID_CATEGORY, P.MONGO_ID, P.ACTIVE, P.IMG_SRC FROM PRODUCTS P WHERE P.ACTIVE = 1 AND P.ID_STORE = nIdStore AND (P.ID_CATEGORY = nIdCategory OR
		P.ID_CATEGORY IN (SELECT ID_CATEGORY FROM CATEGORIES C WHERE C.ID_CATEGORY_PARENT = nIdCategory)
		OR P.ID_CATEGORY IN (SELECT ID_CATEGORY FROM CATEGORIES C2 WHERE C2.ID_CATEGORY_PARENT IN (SELECT ID_CATEGORY FROM CATEGORIES C WHERE C.ID_CATEGORY_PARENT = nIdCategory))
		)
		AND (nStockAlert = 0 OR (P.PRODUCT_STOCK <= P.STOCK_ALERT))
		UNION
		SELECT P2.ID_PRODUCT, P2.PRODUCT_NAME, P2.PRODUCT_LINE, P2.PRODUCT_DESCRIPTION, P2.PRODUCT_BRAND,
		P2.PRODUCT_QUANTITY, P2.PRODUCT_PRICE, P2.PRODUCT_COST, P2.PRODUCT_STOCK, P2.STOCK_ALERT, P2.PRODUCT_OFF, P2.PRODUCT_CODE,
		P2.ID_CATEGORY, P2.MONGO_ID, P2.ACTIVE, P2.IMG_SRC FROM PRODUCTS P2 INNER JOIN PRODUCTS_CATEGORIES PC ON (PC.ID_PRODUCT = P2.ID_PRODUCT)
		WHERE P2.ID_CATEGORY = nIdCategory AND P2.ACTIVE = 1
		AND (nStockAlert = 0 OR (P2.PRODUCT_STOCK <= P2.STOCK_ALERT))
		LIMIT nOffset, nMaxProducts;


	SELECT CEIL(COUNT(*)/nMaxProducts) AS LAST_PAGE, COUNT(*) AS TOTAL FROM (SELECT P.ID_PRODUCT  FROM PRODUCTS P WHERE P.ACTIVE = 1 AND P.ID_STORE = nIdStore AND (P.ID_CATEGORY = nIdCategory OR
		P.ID_CATEGORY IN (SELECT ID_CATEGORY FROM CATEGORIES C WHERE C.ID_CATEGORY_PARENT = nIdCategory)
		OR P.ID_CATEGORY IN (SELECT ID_CATEGORY FROM CATEGORIES C2 WHERE C2.ID_CATEGORY_PARENT IN (SELECT ID_CATEGORY FROM CATEGORIES C WHERE C.ID_CATEGORY_PARENT = nIdCategory))
		)
	UNION
		SELECT P2.ID_PRODUCT FROM PRODUCTS P2 INNER JOIN PRODUCTS_CATEGORIES PC ON (PC.ID_PRODUCT = P2.ID_PRODUCT)
		WHERE P2.ID_CATEGORY = nIdCategory AND P2.ACTIVE = 1
		AND (nStockAlert = 0 OR (P2.PRODUCT_STOCK <= P2.STOCK_ALERT))) PP;

END;

CREATE DEFINER=`root`@`localhost` PROCEDURE `tiendapp`.`SP_PRODUCTS_GET_BY_CATEGORY_FILTER`(IN  nIdStore		INT UNSIGNED,
													 in  nIdCategory 	INT UNSIGNED,
													 IN  fOff			FLOAT,
													 IN  vBrand			VARCHAR(100),
													 IN  nPage			INT UNSIGNED,
													 IN  nStockAlert	INT,
													 OUT nError			INT,
													 OUT vMessage		VARCHAR(100))
BEGIN
	DECLARE nOffset INT DEFAULT 0;
	DECLARE nMaxProducts INT DEFAULT 10;

	SET nOffset = nMaxProducts * (nPage - 1);

	SELECT P.ID_PRODUCT, P.PRODUCT_NAME, P.PRODUCT_LINE, P.PRODUCT_DESCRIPTION, P.PRODUCT_BRAND,
		P.PRODUCT_QUANTITY, P.PRODUCT_PRICE, P.PRODUCT_COST, P.PRODUCT_STOCK, P.STOCK_ALERT, P.PRODUCT_OFF, P.PRODUCT_CODE,
		P.ID_CATEGORY, P.MONGO_ID, P.ACTIVE, P.IMG_SRC FROM PRODUCTS P WHERE P.ACTIVE = 1 AND P.ID_STORE = nIdStore AND (P.ID_CATEGORY = nIdCategory OR
		P.ID_CATEGORY IN (SELECT ID_CATEGORY FROM CATEGORIES C WHERE C.ID_CATEGORY_PARENT = nIdCategory)
		OR P.ID_CATEGORY IN (SELECT ID_CATEGORY FROM CATEGORIES C2 WHERE C2.ID_CATEGORY_PARENT IN (SELECT ID_CATEGORY FROM CATEGORIES C WHERE C.ID_CATEGORY_PARENT = nIdCategory))
		)
		AND P.PRODUCT_OFF = IFNULL(fOff, P.PRODUCT_OFF) AND P.PRODUCT_BRAND = IFNULL(vBrand, P.PRODUCT_BRAND)
		AND (nStockAlert = 0 OR (P.PRODUCT_STOCK <= P.STOCK_ALERT))
		UNION
		SELECT P2.ID_PRODUCT, P2.PRODUCT_NAME, P2.PRODUCT_LINE, P2.PRODUCT_DESCRIPTION, P2.PRODUCT_BRAND,
		P2.PRODUCT_QUANTITY, P2.PRODUCT_PRICE, P2.PRODUCT_COST, P2.PRODUCT_STOCK, P2.STOCK_ALERT, P2.PRODUCT_OFF, P2.PRODUCT_CODE,
		P2.ID_CATEGORY, P2.MONGO_ID, P2.ACTIVE, P2.IMG_SRC FROM PRODUCTS P2 INNER JOIN PRODUCTS_CATEGORIES PC ON (PC.ID_PRODUCT = P2.ID_PRODUCT)
		AND P2.PRODUCT_OFF = IFNULL(fOff, P2.PRODUCT_OFF) AND P2.PRODUCT_BRAND = IFNULL(vBrand, P2.PRODUCT_BRAND)
		WHERE P2.ACTIVE = 1
		AND (nStockAlert = 0 OR (P2.PRODUCT_STOCK <= P2.STOCK_ALERT))
		LIMIT nOffset, nMaxProducts;
	SET nError = 0;
	SET vMessage = 'FETCH';
END;

CREATE DEFINER=`root`@`localhost` PROCEDURE `tiendapp`.`SP_PRODUCTS_GET_BY_STOCK_ALERT`(nIdStore INT UNSIGNED, nPage INT)
BEGIN
	DECLARE nOffset INT DEFAULT 0;
	DECLARE nMaxProducts INT DEFAULT 20;

	SET nOffset = nMaxProducts * (nPage - 1);

	SELECT P.ID_PRODUCT, P.PRODUCT_NAME, P.PRODUCT_LINE, P.PRODUCT_DESCRIPTION, P.PRODUCT_BRAND,
		P.PRODUCT_QUANTITY, P.PRODUCT_PRICE, P.PRODUCT_COST, P.PRODUCT_STOCK, P.STOCK_ALERT, P.PRODUCT_OFF, P.PRODUCT_CODE,
		P.ID_CATEGORY, P.MONGO_ID, P.ACTIVE, P.IMG_SRC, P.ID_STORE  FROM PRODUCTS P
	WHERE P.ID_STORE = nIdStore AND P.ACTIVE = 1 AND P.PRODUCT_STOCK <= P.STOCK_ALERT
	LIMIT nOffset, nMaxProducts;
END;

CREATE DEFINER=`root`@`localhost` PROCEDURE `tiendapp`.`SP_PRODUCTS_GET_BY_STORE`(IN  nIdStore		INT UNSIGNED,
										   IN  nPage		INT UNSIGNED,
										   IN  nStockAlert	INT,
										   OUT nError		INT,
										   OUT vMessage		VARCHAR(100))
BEGIN
	DECLARE nOffset INT DEFAULT 0;
	DECLARE nMaxProducts INT DEFAULT 10;

	SET nOffset = nMaxProducts * (nPage - 1);

	SELECT P.ID_PRODUCT, P.PRODUCT_NAME, P.PRODUCT_LINE, P.PRODUCT_DESCRIPTION, P.PRODUCT_BRAND,
		P.PRODUCT_QUANTITY, P.PRODUCT_PRICE, P.PRODUCT_COST, P.PRODUCT_STOCK, P.STOCK_ALERT, P.PRODUCT_OFF, P.PRODUCT_CODE,
		P.ID_CATEGORY, P.MONGO_ID, P.ACTIVE, P.IMG_SRC, P.ID_STORE  FROM PRODUCTS P
	WHERE P.ID_STORE = nIdStore AND P.ACTIVE = 1
	AND (nStockAlert = 0 OR (P.PRODUCT_STOCK <= P.STOCK_ALERT))
	LIMIT nOffset, nMaxProducts;

	SELECT CEIL(COUNT(*)/nMaxProducts) AS LAST_PAGE, COUNT(*) AS TOTAL FROM PRODUCTS P WHERE P.ID_STORE = nIdStore AND P.ACTIVE = 1;

	SET nError = 0;
	SET vMessage = 'FETCH';
END;

CREATE DEFINER=`root`@`localhost` PROCEDURE `tiendapp`.`SP_PRODUCTS_GET_BY_STORE_FILTER`(IN  nIdStore		INT UNSIGNED,
												  IN  fOff			FLOAT,
												  IN  vBrand		VARCHAR(100),
												  IN  nPage			INT UNSIGNED,
												  OUT nError		INT,
												  OUT vMessage		VARCHAR(100))
BEGIN
	DECLARE nOffset INT DEFAULT 0;
	DECLARE nMaxProducts INT DEFAULT 20;

	SET nOffset = nMaxProducts * (nPage - 1);

	SELECT P.ID_PRODUCT, P.PRODUCT_NAME, P.PRODUCT_LINE, P.PRODUCT_DESCRIPTION, P.PRODUCT_BRAND,
		P.PRODUCT_QUANTITY, P.PRODUCT_PRICE, P.PRODUCT_COST, P.PRODUCT_STOCK, P.STOCK_ALERT, P.PRODUCT_OFF, P.PRODUCT_CODE,
		P.ID_CATEGORY, P.MONGO_ID, P.ACTIVE, P.IMG_SRC FROM PRODUCTS P
	WHERE P.ID_STORE = nIdStore AND P.ACTIVE = 1 AND P.PRODUCT_OFF >= IFNULL(fOff, P.PRODUCT_OFF) AND P.PRODUCT_BRAND = IFNULL(vBrand, P.PRODUCT_BRAND)
	AND (nStockAlert = 0 OR (P.PRODUCT_STOCK <= P.STOCK_ALERT))
	LIMIT nOffset, nMaxProducts;
	SET nError = 0;
	SET vMessage = 'FETCH';
END;

CREATE DEFINER=`root`@`localhost` PROCEDURE `tiendapp`.`SP_PRODUCTS_GET_PRODUCT`(IN  nIdProduct INT UNSIGNED,
										 OUT nError 	INT,
										 OUT vMessage	VARCHAR(100))
BEGIN
	SELECT P.ID_PRODUCT, P.PRODUCT_NAME, P.PRODUCT_LINE, P.PRODUCT_DESCRIPTION, P.PRODUCT_BRAND,
		P.PRODUCT_QUANTITY, P.PRODUCT_PRICE, P.PRODUCT_COST, P.PRODUCT_STOCK, P.STOCK_ALERT, P.PRODUCT_OFF, P.PRODUCT_CODE,
		P.ID_CATEGORY, P.MONGO_ID, P.ACTIVE, P.IMG_SRC FROM PRODUCTS P WHERE P.ID_PRODUCT = nIdProduct AND P.ACTIVE = 1;
	SET nError = 0;
	SET vMessage = 'FETCH';
END;

CREATE DEFINER=`root`@`localhost` PROCEDURE `tiendapp`.`SP_PRODUCTS_INSERT`(IN  vProductName			VARCHAR(200),
									IN  vProductLine			VARCHAR(100),
									IN  vProductDescription 	TEXT,
									IN 	vProductBrand			VARCHAR(100),
									IN  fQuantity				FLOAT,
									IN  nProductPrice			FLOAT UNSIGNED,
									IN  nProductCost			FLOAT UNSIGNED,
									IN  nProductStock			INT UNSIGNED,
									IN  fOff					FLOAT,
									IN  vProductCode			VARCHAR(20),
									IN  nIdStore				INT UNSIGNED,
									IN  nIdCategory				INT UNSIGNED,
									IN  vMongoId				VARCHAR(24),
									IN  vImgSrc					VARCHAR(500),
									IN  nStockAlert				INT UNSIGNED,
									OUT nError					INT,
									OUT vMessage				VARCHAR(100))
BEGIN
	DECLARE existCode INT DEFAULT 0;

	IF vProductName IS NULL OR vProductName = '' OR nProductPrice IS NULL OR nIdStore IS NULL THEN
		SET nError = 1;
		SET vMessage = 'Product has null items';
	ELSE
		SELECT 1 INTO existCode FROM PRODUCTS P WHERE P.ID_STORE = nIdStore AND P.PRODUCT_CODE = vProductCode AND vProductCode IS NOT NULL
		AND vProductCode != '';
		IF existCode = 1 THEN
			SET nError = 2;
			SET vMessage = 'Codigo de producto ya existe';
		ELSE
			INSERT INTO PRODUCTS (PRODUCT_NAME, PRODUCT_LINE, PRODUCT_DESCRIPTION, PRODUCT_BRAND, PRODUCT_QUANTITY, PRODUCT_PRICE, PRODUCT_COST,
				PRODUCT_STOCK, PRODUCT_OFF, PRODUCT_CODE, ID_STORE, ID_CATEGORY, MONGO_ID, ACTIVE, IMG_SRC, STOCK_ALERT) VALUES (vProductName, vProductLine,
				vProductDescription, vProductBrand, fQuantity,
				nProductPrice, nProductCost, nProductStock, fOff, vProductCode, nIdStore, nIdCategory, vMongoId, 1, vImgSrc, nStockAlert);
			SET nError = 0;
			SET vMessage = 'Producto agregado exitosamente';
		END IF;
	END IF;
	SELECT nError AS ERROR, vMessage AS MESSAGE;
END;

CREATE DEFINER=`root`@`localhost` PROCEDURE `tiendapp`.`SP_PRODUCTS_UPDATE`(IN  nIdProduct				INT UNSIGNED,
									IN  vProductName			VARCHAR(200),
									IN  vProductLine			VARCHAR(100),
									IN  vProductDescription 	TEXT,
									IN 	vProductBrand			VARCHAR(100),
									IN  fQuantity				FLOAT,
									IN  nProductPrice			FLOAT,
									IN	nProductCost			FLOAT,
									IN  nProductStock			INT UNSIGNED,
									IN  fOff					FLOAT,
									IN  vProductCode			VARCHAR(20),
									IN  nIdCategory				INT UNSIGNED,
									IN	vImgSrc					VARCHAR(500),
									IN  nStockAlert				INT UNSIGNED,
									OUT nError					INT,
									OUT vMessage				VARCHAR(100))
BEGIN
	DECLARE nRowCount INT DEFAULT 0;
	DECLARE existCodigo INT DEFAULT 0;
	DECLARE nIdStore INT UNSIGNED;

	SELECT COUNT(*) INTO nRowCount FROM PRODUCTS P WHERE P.ID_PRODUCT = nIdProduct;
	IF nRowCount > 0 THEN
		SELECT P.ID_STORE INTO nIdStore FROM PRODUCTS P WHERE P.ID_PRODUCT = nIdProduct;

		SELECT 1 INTO existCodigo FROM PRODUCTS P WHERE P.ID_STORE = nIdStore AND P.PRODUCT_CODE = vProductCode
			AND P.ID_PRODUCT != nIdProduct AND (vProductCode IS NOT NULL AND vProductCode != '');

		IF existCodigo = 0 THEN
			UPDATE PRODUCTS P SET P.PRODUCT_NAME = IFNULL(vProductName, P.PRODUCT_NAME),
				P.PRODUCT_LINE = IFNULL(vProductLine, P.PRODUCT_LINE),
				P.PRODUCT_DESCRIPTION = IFNULL (vProductDescription, P.PRODUCT_DESCRIPTION),
				P.PRODUCT_BRAND = IFNULL(vProductBrand, P.PRODUCT_BRAND),
				P.PRODUCT_QUANTITY = IFNULL(fQuantity, P.PRODUCT_QUANTITY),
				P.PRODUCT_PRICE = IFNULL(nProductPrice, P.PRODUCT_PRICE),
				P.PRODUCT_COST = IFNULL(nProductCost, P.PRODUCT_COST),
				P.PRODUCT_OFF = IFNULL(fOff, P.PRODUCT_OFF),
				P.PRODUCT_CODE = IFNULL(vProductCode, P.PRODUCT_CODE),
				P.PRODUCT_STOCK = IFNULL(nProductStock, P.PRODUCT_STOCK),
				P.ID_CATEGORY = IFNULL(nIdCategory, P.ID_CATEGORY),
				P.IMG_SRC = IFNULL(vImgSrc, P.IMG_SRC),
				P.STOCK_ALERT = IFNULL(nStockAlert, P.STOCK_ALERT)
				WHERE P.ID_PRODUCT = nIdProduct;
			SET nError = 0;
			SET vMessage = 'Product modificado correctamente';
		ELSE
			SET nError = 0;
			SET vMessage = 'El codigo que deseas actualizar pertenece a otro producto';
		END IF;
	ELSE
		SET nError = 1;
		SET vMessage = 'Product does not exists';
	END IF;
	SELECT nError AS ERROR, vMessage AS MESSAGE;
END;

CREATE DEFINER=`root`@`localhost` PROCEDURE `tiendapp`.`SP_STORES_DELETE`(
								  IN  nIdStore		INT,
								  OUT nError		INT,
								  OUT vMessage		VARCHAR(100))
BEGIN
	DECLARE nRowCount INT DEFAULT 0;
	SELECT COUNT(*) INTO nRowCount FROM STORES S WHERE S.ID_STORE = nIdStore;
	IF nRowCount > 0 THEN
		/*
		 * FOREIGN KEYS MUST BE DELETED HERE
		 */
		UPDATE STORES S SET S.ACTIVO = 0 WHERE S.ID_STORE = nIdStore;
		SET nError = 0;
		SET vMessage  = 'Store deleted succesfuly';
	ELSE
		SET nError = 1;
		SET vMessage = 'Store does not exits';
	END IF;
	SELECT nError AS ERROR, vMessage AS MESSAGE;
END;

CREATE DEFINER=`root`@`localhost` PROCEDURE `tiendapp`.`SP_STORES_INSERT`(IN  vStoreName	VARCHAR(100),
								  IN  vURL				VARCHAR(300),
								  IN  vMongoId			VARCHAR(24),
								  IN  nIdUser			INT,
								  IN  vNoId				VARCHAR(50),
								  IN  vAddress			VARCHAR(100),
								  IN  vPhone			VARCHAR(30),
								  IN  vSocialNetworks 	TEXT)
BEGIN
	DECLARE nRowCount INT DEFAULT 0;
	DECLARE nError INT;
	DECLARE vMessage VARCHAR(200);
	DECLARE nIdStore INT UNSIGNED;

	SELECT COUNT(*) INTO nRowCount FROM STORES S WHERE LOWER(S.STORE_NAME) = LOWER(vStoreName);
	IF nRowCount > 0 THEN
		SET nError = 1;
		SET vMessage = 'Store name already exits';
	ELSE
		SET nRowCount = 0;
		SELECT COUNT(*) INTO nRowCount FROM STORES S WHERE LOWER(S.URL) = LOWER(vURL);
		IF nRowCount > 0 THEN
			SET nError = 2;
			SET vMessage = 'URL already exits';
		ELSE
			INSERT INTO STORES(STORE_NAME, CREATED_AT, URL, MONGO_ID, ID_USER,
			NO_ID, ADDRESS, PHONE, SOCIAL_NETWORKS, ACTIVO)
			VALUES (vStoreName, NOW(), vURL, vMongoId, nIdUser, vNoId, vAddress, vPhone, vSocialNetworks, 1);
			SELECT S.ID_STORE INTO nIdStore FROM STORES S WHERE S.ID_USER = nIdUser AND S.STORE_NAME = vStoreName;

			IF nIdStore IS NOT NULL THEN
				/*El usuario que crea la tienda, se le agrega a su conjunto de tiendas*/
				INSERT INTO USERS_STORES VALUES(NULL, nIdUser, nIdStore, 1);
				INSERT INTO USERS_ROLES VALUES(NULL, nIdUser, 1, nIdStore);
			END IF;

			SET nError = 0;
			SET vMessage = 'Store added succesfuly';
		END IF;
	END IF;
	SELECT nError AS ERROR, vMessage AS MESSAGE;
END;

CREATE DEFINER=`root`@`localhost` PROCEDURE `tiendapp`.`SP_STORES_UPDATE`(IN  nIdStore		INT,
								  IN  vStoreName		VARCHAR(100),
								  IN  vURL				VARCHAR(300),
								  IN  vNoId				VARCHAR(50),
								  IN  vAddress			VARCHAR(100),
								  IN  vPhone			VARCHAR(30),
								  IN  vSocialNetworks 	TEXT)
BEGIN
	DECLARE nRowCount INT DEFAULT 0;
	DECLARE nError INT;
	DECLARE vMessage VARCHAR(100);

	SELECT COUNT(*) INTO nRowCount FROM STORES S WHERE S.ID_STORE = nIdStore;
	IF nRowCount > 0 THEN
		UPDATE STORES S SET S.STORE_NAME = IFNULL(vStoreName, S.STORE_NAME), S.URL = IFNULL(vURL, S.URL),
		S.NO_ID = IFNULL(vNoId, S.NO_ID), S.ADDRESS = IFNULL(vAddress, S.ADDRESS),
		S.PHONE = IFNULL(vPhone, S.PHONE), S.SOCIAL_NETWORKS = IFNULL(vSocialNetworks, S.SOCIAL_NETWORKS) WHERE ID_STORE = nIdStore;
		SET nError = 0;
		SET vMessage  = 'Stored updated succesfuly';
	ELSE
		SET nError = 1;
		SET vMessage = 'Store does not exits';
	END IF;
	SELECT nError AS ERROR, vMessage AS MESSAGE;
END;

CREATE DEFINER=`root`@`localhost` PROCEDURE `tiendapp`.`SP_SUPPLIERS_ADD_BILL`(
	nIdStore INT UNSIGNED,
	nIdSupplier INT UNSIGNED,
	vRefPago VARCHAR(200))
BEGIN
	DECLARE vCode VARCHAR(70) DEFAULT '';
	DECLARE vStatus INT UNSIGNED;
	DECLARE vSupplierId VARCHAR(100) DEFAULT '';

	IF nIdSupplier IS NOT NULL THEN
		SELECT SUPPLIER_ID INTO vSupplierId FROM SUPPLIERS S WHERE S.ID_SUPPLIER = nIdSupplier;
	END IF;

	SELECT ROUND(UNIX_TIMESTAMP(CURTIME(4)) * 1000) INTO vCode FROM DUAL;
	SET vCode = CONCAT(vCode, vSupplierId);

	SELECT ID_STATUS INTO vStatus FROM PAR_STATUS PS WHERE CODE = 'S1';

	INSERT INTO BILLS(AMMOUNT, CREATED_AT, ID_STATUS, CODE, ID_STORE, ID_SUPPLIER) VALUES
	(0, CURRENT_TIMESTAMP(), vStatus, vCode, nIdStore, nIdSupplier);

	COMMIT;
	SELECT 0 AS ERROR, 'Factura creada correctamente' AS MESSAGE, ID_BILL, CODE FROM BILLS WHERE CODE = vCode;
END;

CREATE DEFINER=`root`@`localhost` PROCEDURE `tiendapp`.`SP_SUPPLIERS_ADD_PRODUCT_TO_BILL`(
	nIdStore INT UNSIGNED,
	nIdBill INT UNSIGNED,
	nIdProduct INT UNSIGNED,
	nUnits INT UNSIGNED)
BEGIN
	DECLARE actualPrice BIGINT UNSIGNED DEFAULT 0;
	DECLARE nPrice BIGINT UNSIGNED DEFAULT 0;
	DECLARE nAmmount BIGINT UNSIGNED DEFAULT 0;
	DECLARE nCost BIGINT UNSIGNED DEFAULT 0;
	DECLARE nIdStatus INT UNSIGNED DEFAULT 0;
	SELECT B.ID_STATUS INTO nIdStatus FROM BILLS B WHERE B.ID_BILL = nIdBill AND B.ID_STORE = nIdStore;
	IF nIdStatus = nIdStatus THEN
		SELECT P.PRODUCT_COST INTO nCost FROM PRODUCTS P WHERE P.ID_PRODUCT = nIdProduct AND P.ID_STORE = nIdStore;
		INSERT INTO BILLS_DETAIL (ID_BILL, ID_PRODUCT, PRICE, FINAL_PRICE, COST, UNITS)
		VALUES (nIdBill, nIdProduct, nCost, nCost * nUnits, nCost, nUnits);
		COMMIT;
		SELECT 0 AS ERROR, 'Producto agregado correctamente a la factura' AS MESSAGE FROM DUAL;
	ELSE
		SELECT 1 AS ERROR, 'Factura no estÃ¡ abierta' AS MESSAGE FROM DUAL;
	END IF;
END;

CREATE DEFINER=`root`@`localhost` PROCEDURE `tiendapp`.`SP_SUPPLIERS_ADD_SUPPLIER`(
	nIdStore INT UNSIGNED,
	vSupplierName VARCHAR(100),
	vSupplierId VARCHAR(100),
	vSupplierAddress VARCHAR(200),
	vSupplierPhone VARCHAR(30),
	vSupplierEmail VARCHAR(100),
	vDescription VARCHAR(500))
BEGIN
	DECLARE nCount INT;
	SELECT COUNT(*) into nCount FROM SUPPLIERS S WHERE S.SUPPLIER_NAME = vSupplierName AND S.ID_STORE = nIdStore LIMIT 1;
	IF nCount > 0 THEN
		SELECT 'FAILx' AS `RESULT`, 1 AS ERROR, 'Proveedor ya existe' AS MESSAGE FROM DUAL;
	ELSE
		INSERT INTO SUPPLIERS (SUPPLIER_NAME, SUPPLIER_ID, SUPPLIER_ADDRESS, SUPPLIER_PHONE,
			SUPPLIER_EMAIL, ID_STORE, DESCRIPTION)
		VALUES (vSupplierName, vSupplierId, vSupplierAddress, vSupplierPhone,
			vSupplierEmail, nIdStore, vDescription);
		COMMIT;
		SELECT 'OK' AS `RESULT`, 0 AS ERROR, 'Proveedor creado exitosamente' AS MESSAGE FROM DUAL;
	END IF;
END;

CREATE DEFINER=`root`@`localhost` PROCEDURE `tiendapp`.`SP_SUPPLIERS_DEL_PRODUCT_FROM_BILL`(
	nIdStore INT UNSIGNED,
	nIdBill INT UNSIGNED,
	nIdBillDetail INT UNSIGNED)
BEGIN
	DECLARE nStatus INT UNSIGNED;
	DECLARE affectedRows INT DEFAULT 0;

	SELECT B.ID_STATUS INTO nStatus FROM BILLS B WHERE B.ID_STORE = nIdStore AND B.ID_BILL = nIdBill;

	IF nStatus IS NOT NULL AND nStatus = nStatus THEN
		DELETE FROM BILLS_DETAIL BD WHERE BD.ID_BILL = nIdBill AND BD.ID_BILL_DETAIL = nIdBillDetail;
		SELECT ROW_COUNT() INTO affectedRows FROM DUAL;
		IF affectedRows > 0 THEN
			SELECT 'OK' AS `RESULT`, 0 AS ERROR, 'Producto eliminado correctamente' AS MESSAGE FROM DUAL;
		ELSE
			SELECT 'FAIL' AS `RESULT`, 2 AS ERROR, 'No se eliminÃ³ nada' AS MESSAGE FROM DUAL;
		END IF;
	ELSE
		SELECT 'FAIL' AS `RESULT`, 1 AS ERROR, 'La factura no existe' AS MESSAGE FROM DUAL;
	END IF;
END;

CREATE DEFINER=`root`@`localhost` PROCEDURE `tiendapp`.`SP_SUPPLIERS_DEL_SUPPLIER`(
	nIdStore INT UNSIGNED,
	nIdSupplier INT UNSIGNED)
BEGIN
	DECLARE affectedRows INT DEFAULT 0;

	UPDATE SUPPLIERS S SET S.ACTIVE = 0 WHERE S.ID_STORE = nIdStore AND S.ID_SUPPLIER = nIdSupplier;

	SELECT ROW_COUNT() INTO affectedRows FROM DUAL;

	IF affectedRows > 0 THEN
		SELECT 'OK' AS `RESULT`, 0 AS ERROR, 'Proveedor eliminado correctamente' AS MESSAGE FROM DUAL;
	ELSE
		SELECT 'FAIL' AS `RESULT`, 1 AS ERROR, 'No se eliminÃ³ al proveedor' AS MESSAGE FROM DUAL;
	END IF;
	COMMIT;
END;

CREATE DEFINER=`root`@`localhost` PROCEDURE `tiendapp`.`SP_SUPPLIERS_GET`(nIdStore INT UNSIGNED, nIdSupplier INT UNSIGNED)
BEGIN
	DECLARE nExists INT DEFAULT 0;
	SELECT 1 INTO nExists FROM SUPPLIERS S WHERE S.ID_STORE = nIdStore AND S.ID_SUPPLIER = nIdSupplier
	AND S.ACTIVE = 1;

	IF nExists = 1 THEN
		SELECT * FROM SUPPLIERS S WHERE S.ID_STORE = nIdStore AND S.ID_SUPPLIER = nIdSupplier
		AND S.ACTIVE = 1;
		SELECT 0 AS ERROR, 'OK' AS `RESULT`, 'Proveedor encontrado' AS MESSAGE FROM DUAL;
	ELSE
		SELECT NULL FROM DUAL;
		SELECT 1 AS ERROR, 'FAIL' AS `RESULT`, 'Proveedor NO encontrado' AS MESSAGE FROM DUAL;
	END IF;
END;

CREATE DEFINER=`root`@`localhost` PROCEDURE `tiendapp`.`SP_SUPPLIERS_GET_BILLS`(nIdStore INT UNSIGNED, nIdSupplier INT UNSIGNED, query VARCHAR(200), nPage INT)
BEGIN
	SELECT B.* FROM BILLS B INNER JOIN PAR_STATUS PS ON B.ID_STATUS = PS.ID_STATUS LEFT JOIN SUPPLIERS S
	ON S.ID_SUPPLIER = B.ID_SUPPLIER WHERE B.ID_STORE = nIdStore
	AND ( nIdSupplier IS NULL OR (nIdSupplier IS NOT NULL AND B.ID_SUPPLIER = nIdSupplier) ) AND PS.DESCRIPTION LIKE 'PROVEEDOR-%'
	AND ( query IS NULL OR (
		UPPER(B.REF_PAGO) LIKE CONCAT('%', UPPER(query), '%') OR
		UPPER(S.SUPPLIER_NAME) LIKE CONCAT('%', UPPER(query), '%') OR
		UPPER(S.SUPPLIER_ID) LIKE CONCAT('%', UPPER(query), '%') OR
		UPPER(S.SUPPLIER_PHONE) LIKE CONCAT('%', UPPER(query), '%') OR
		UPPER(S.SUPPLIER_EMAIL) LIKE CONCAT('%', UPPER(query), '%')
	));
END;

CREATE DEFINER=`root`@`localhost` PROCEDURE `tiendapp`.`SP_SUPPLIERS_GET_BY_STORE`(nIdStore INT UNSIGNED, query VARCHAR(100), nPage INT UNSIGNED)
BEGIN
	DECLARE nCount INT DEFAULT 0;
	DECLARE nMaxLimit INT DEFAULT 20;
	DECLARE nOffset INT DEFAULT 0;

	SELECT COUNT(*) INTO nCount FROM SUPPLIERS S WHERE S.ID_STORE = nIdStore AND (
		query IS NULL
		OR
		(
			query IS NOT NULL AND
			(
			LOWER(SUPPLIER_NAME) LIKE CONCAT('%', LOWER(query), '%') OR
			LOWER(SUPPLIER_ID) LIKE CONCAT('%', LOWER(query), '%') OR
			LOWER(SUPPLIER_PHONE) LIKE CONCAT('%', LOWER(query), '%') OR
			LOWER(SUPPLIER_ADDRESS) LIKE CONCAT('%', LOWER(query), '%') OR
			LOWER(SUPPLIER_EMAIL) LIKE CONCAT('%', LOWER(query), '%') OR
			LOWER(DESCRIPTION) LIKE CONCAT('%', LOWER(query), '%')
			)
		)
	)
	AND ACTIVE = 1
	;

	SET nOffset = (nPage - 1) * nMaxLimit;

	SELECT * FROM SUPPLIERS S WHERE S.ID_STORE = nIdStore AND (
		query IS NULL
		OR
		(
			query IS NOT NULL AND
			(
			LOWER(SUPPLIER_NAME) LIKE CONCAT('%', LOWER(query), '%') OR
			LOWER(SUPPLIER_ID) LIKE CONCAT('%', LOWER(query), '%') OR
			LOWER(SUPPLIER_PHONE) LIKE CONCAT('%', LOWER(query), '%') OR
			LOWER(SUPPLIER_ADDRESS) LIKE CONCAT('%', LOWER(query), '%') OR
			LOWER(SUPPLIER_EMAIL) LIKE CONCAT('%', LOWER(query), '%') OR
			LOWER(DESCRIPTION) LIKE CONCAT('%', LOWER(query), '%')
			)
		)
	)
	AND ACTIVE = 1
	LIMIT nOffset, nMaxLimit;

	SELECT nPage AS ACTUAL_PAGE, CEIL(nCount/nMaxLimit) AS LAST_PAGE, nCount AS TOTAL FROM DUAL;
END;

CREATE DEFINER=`root`@`localhost` PROCEDURE `tiendapp`.`SP_SUPPLIERS_UPDATE_PRODUCT_FROM_BILL`(
	nIdStore INT UNSIGNED,
	nIdBill INT UNSIGNED,
	nIdBillDetail INT UNSIGNED,
	nUnits INT)
BEGIN
	DECLARE nStatus INT UNSIGNED;
	DECLARE nCosto INT DEFAULT 0;
	DECLARE nIdProduct INT UNSIGNED;
	DECLARE affectedRows INT;

	SELECT BD.ID_PRODUCT INTO nIdProduct FROM BILLS_DETAIL BD INNER JOIN BILLS B ON B.ID_BILL = BD.ID_BILL WHERE BD.ID_BILL_DETAIL = nIdBillDetail
	AND B.ID_BILL = nIdBill AND B.ID_STORE = nIdStore;

	SELECT P.PRODUCT_COST INTO nCosto FROM PRODUCTS P WHERE P.ID_PRODUCT = nIdProduct;

	IF nIdProduct IS NOT NULL AND nCosto IS NOT NULL THEN
		IF nUnits IS NOT NULL THEN
			UPDATE BILLS_DETAIL BD SET BD.UNITS = nUnits, BD.PRICE = nCosto, BD.COST = nCosto, BD.FINAL_PRICE = nCosto * nUnits
			WHERE BD.ID_BILL_DETAIL = nIdBillDetail;

			SELECT ROW_COUNT() INTO affectedRows FROM DUAL;
			IF affectedRows > 0 THEN
				SELECT 'OK' AS `RESULT`, 0 AS ERROR, 'Producto actualizado correctamente' AS MESSAGE FROM DUAL;
			ELSE
				SELECT 'FAIL' AS `RESULT`, 3 AS ERROR, 'No se actualizÃ³ nada' AS MESSAGE FROM DUAL;
			END IF;
		ELSE
			SELECT 'FAIL' AS `RESULT`, 2 AS ERROR, 'El nÃºmero de unidades no puede ser nulo' AS MESSAGE FROM DUAL;
		END IF;
	ELSE
		SELECT 'FAIL' AS `RESULT`, 1 AS ERROR, 'No existe el producto en la factura' AS MESSAGE FROM DUAL;
	END IF;
END;

CREATE DEFINER=`root`@`localhost` PROCEDURE `tiendapp`.`SP_SUPPLIERS_UPDATE_SUPPLIER`(
	nIdStore INT UNSIGNED,
	nIdSupplier INT UNSIGNED,
	vSupplierName VARCHAR(100),
	vSupplierId VARCHAR(100),
	vSupplierAddress VARCHAR(200),
	vSupplierPhone VARCHAR(30),
	vSupplierEmail VARCHAR(100),
	vDescription VARCHAR(500)
)
BEGIN
	DECLARE affectedRows INT DEFAULT 0;

	UPDATE SUPPLIERS S SET
	SUPPLIER_NAME = IFNULL(vSupplierName, S.SUPPLIER_NAME),
	SUPPLIER_ID = IFNULL(vSupplierId, S.SUPPLIER_ID),
	SUPPLIER_ADDRESS = IFNULL(vSupplierAddress, S.SUPPLIER_ADDRESS),
	SUPPLIER_PHONE = IFNULL(vSupplierPhone, S.SUPPLIER_PHONE),
	SUPPLIER_EMAIL = IFNULL(vSupplierEmail, S.SUPPLIER_EMAIL),
	DESCRIPTION = IFNULL(vDescription, S.DESCRIPTION),
	UPDATED_AT = CURRENT_TIMESTAMP()
	WHERE S.ID_STORE = nIdStore AND S.ID_SUPPLIER = nIdSupplier;

	SELECT ROW_COUNT() INTO affectedRows FROM DUAL;

	IF affectedRows <= 0 THEN
		SELECT 'FAIL' AS `RESULT`, 1 AS ERROR, 'No se actualizÃ³ nada' AS MESSAGE FROM DUAL;
	ELSE
		SELECT 'OK' AS `RESULT`, 0 AS ERROR, 'Proveedor actualizado correctamente' AS MESSAGE FROM DUAL;
	END IF;
	COMMIT;
END;

CREATE DEFINER=`root`@`localhost` PROCEDURE `tiendapp`.`SP_USERS_AUTH`(IN  vUsername		VARCHAR(100),
								IN  vPass			VARCHAR(64),
								OUT nError			INT,
								OUT vMessage		VARCHAR(100))
BEGIN
	DECLARE nRowCount INT DEFAULT 0;

	SELECT ID_USER, USERNAME FROM USERS U WHERE U.USERNAME = vUsername AND U.PASSWORD = SHA2(vPass, 256);
	SELECT FOUND_ROWS() INTO nRowCount;
	IF(nRowCount>0) THEN
		SET nError = 0;
		SET vMessage = 'Authentication OK';
	ELSE
		SET nError = 1;
		SET vMessage = 'Authentication FAIL';
	END IF;
END;

CREATE DEFINER=`root`@`localhost` PROCEDURE `tiendapp`.`SP_USERS_INSERT`(IN  vUsername	VARCHAR(100),
								 IN  vEmail		VARCHAR(100),
								 IN  vPass		VARCHAR(64),
								 IN	 vMongoId	VARCHAR(24),
								 OUT nError		INT,
								 OUT vMessage	VARCHAR(100))
BEGIN
	#CHECK IF USERNAME EXISTS
	DECLARE nUserCount INT DEFAULT 0;
	DECLARE nRowCount INT DEFAULT 0;
	DECLARE nIdUser INT UNSIGNED;

	SELECT COUNT(*) INTO nUserCount FROM USERS U WHERE U.USERNAME = vUsername;
	#IF USER ALEADY EXITS
	IF(nUserCount>0) THEN
		SET nError = 1;
		SET vMessage = 'Username already exits';
	ELSE
		SELECT COUNT(*) INTO nUserCount FROM USERS U WHERE U.EMAIL = vEmail;
		IF(nUserCount>0) THEN
			SET nError := 2;
			SET vMessage = 'Email is associated with other account';
		ELSE
			INSERT INTO USERS(USERNAME, EMAIL, PASSWORD, MONGO_ID) VALUES(vUsername, vEmail, SHA2(vPass, 256), vMongoId);
			SELECT U.ID_USER INTO nIdUser FROM USERS U WHERE U.USERNAME = vUsername;
			IF nIdUser IS NOT NULL THEN
				INSERT INTO USERS_ROLES VALUES(NULL, nIdUser, 1, NULL);
			END IF;
			SET nError = 0;
			SET vMessage = 'User added correctly';
		END IF;
	END IF;
	SELECT nError AS ERROR, vMessage AS MESSAGE;
END;

CREATE DEFINER=`root`@`localhost` PROCEDURE `tiendapp`.`SP_USERS_UPDATE`(IN nIdUser	INT UNSIGNED,
								 IN  vUsername		VARCHAR(100),
								 IN  vNewUsername	VARCHAR(100),
								 IN  vOldPass		VARCHAR(64),
								 IN  vNewPass		VARCHAR(64),
								 IN  vNewEmail		VARCHAR(100),
								 OUT nError			INT,
								 OUT vMessage		VARCHAR(100))
BEGIN
	DECLARE nRowCount INT DEFAULT 0;
	DECLARE nAuthError INT DEFAULT -1;
	DECLARE vAuthMessage VARCHAR(100) DEFAULT '';
	CALL SP_USERS_AUTH(vUsername, vOldPass, nAuthError, vAuthMessage);
	IF nAuthError = 0 THEN
		SELECT COUNT(*) INTO nRowCount FROM USERS U WHERE U.USERNAME = vNewUsername;
		IF(nRowCount>0) THEN
			SET nError = 2;
			SET vMessage = 'Username already exits';
		ELSE
			SELECT COUNT(*) INTO nRowCount FROM USERS U WHERE U.EMAIL = vNewEmail;
			IF(nRowCount>0) THEN
				SET nError = 3;
				SET vMessage = 'Email is associated wiht another account';
			ELSE
				UPDATE USERS U SET U.USERNAME = IFNULL(vNewUsername, U.USERNAME), U.PASSWORD = IFNULL(SHA2(vNewPass, 256), U.PASSWORD),
					U.EMAIL = IFNULL(vNewEmail, U.EMAIL) WHERE U.ID_USER = nIdUser;
				SET nError = 0;
				SET vMessage = 'User updated correctly';
			END IF;
		END IF;
	ELSE
		SET nError = nAuthError;
		SET vMessage = vAuthMessage;
	END IF;
	SELECT nError AS ERROR, vMessage AS MESSAGE;
END;

CREATE DEFINER=`root`@`localhost` PROCEDURE `tiendapp`.`SP_USER_GET_ROLES`(IN  nIdUser		VARCHAR(100),
									  IN  nIdStore		INT,
									  OUT nError		INT,
									  OUT vMessage		VARCHAR(100))
BEGIN
	DECLARE nRowCount INT DEFAULT 0;

	SELECT UR.ID_USER, UR.ID_ROLE, ROLE_NAME, ID_STORE FROM USERS_ROLES UR INNER JOIN ROLES R ON (R.ID_ROLE = UR.ID_ROLE)
	WHERE UR.ID_USER = nIdUser AND UR.ID_STORE = nIdStore;
	SELECT FOUND_ROWS() INTO nRowCount;
	IF(nRowCount>0) THEN
		SET nError = 0;
		SET vMessage = 'Has roles';
	ELSE
		SET nError = 1;
		SET vMessage = 'Has not roles';
	END IF;
END;

CREATE DEFINER=`root`@`localhost` PROCEDURE `tiendapp`.`TEST_P`(INOUT vMess VARCHAR(100))
BEGIN
	SET vMess = 'Estoy haciendo esto por nosotros';
END;
