-- tiendapp.PAR_STATUS definition

CREATE TABLE `PAR_STATUS` (
  `ID_STATUS` int unsigned NOT NULL AUTO_INCREMENT,
  `DESCRIPTION` varchar(200) DEFAULT NULL,
  `CODE` varchar(20) DEFAULT NULL,
  PRIMARY KEY (`ID_STATUS`)
) ENGINE=InnoDB AUTO_INCREMENT=14 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;


-- tiendapp.PAR_USER_TYPE definition

CREATE TABLE `PAR_USER_TYPE` (
  `ID_PAR_USER_TYPE` int unsigned NOT NULL AUTO_INCREMENT,
  `DESCRIPTION` varchar(30) DEFAULT NULL,
  PRIMARY KEY (`ID_PAR_USER_TYPE`)
) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;


-- tiendapp.PATHS definition

CREATE TABLE `PATHS` (
  `ID_PATH` int unsigned NOT NULL AUTO_INCREMENT,
  `PATH` varchar(300) DEFAULT NULL,
  `METHOD` varchar(10) DEFAULT NULL,
  `DESCRIPTION` text,
  `PUBLIC` smallint unsigned DEFAULT '0',
  PRIMARY KEY (`ID_PATH`)
) ENGINE=InnoDB AUTO_INCREMENT=37 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;


-- tiendapp.ROLES definition

CREATE TABLE `ROLES` (
  `ID_ROLE` int unsigned NOT NULL AUTO_INCREMENT,
  `ROLE_NAME` varchar(100) DEFAULT NULL,
  `DESCRIPTION` text,
  PRIMARY KEY (`ID_ROLE`)
) ENGINE=InnoDB AUTO_INCREMENT=6 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;


-- tiendapp.USERS definition

CREATE TABLE `USERS` (
  `ID_USER` int unsigned NOT NULL AUTO_INCREMENT,
  `USERNAME` varchar(100) DEFAULT NULL,
  `EMAIL` varchar(100) DEFAULT NULL,
  `PASSWORD` varchar(64) DEFAULT NULL,
  `CONF_EMAIL` tinyint(1) DEFAULT '0',
  `MONGO_ID` varchar(24) DEFAULT NULL,
  `IMG_SRC` varchar(500) DEFAULT NULL,
  PRIMARY KEY (`ID_USER`)
) ENGINE=InnoDB AUTO_INCREMENT=10 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;


-- tiendapp.PATHS_ROLES definition

CREATE TABLE `PATHS_ROLES` (
  `ID_PATH_ROLE` int unsigned NOT NULL AUTO_INCREMENT,
  `ID_PATH` int unsigned DEFAULT NULL,
  `ID_ROLE` int unsigned DEFAULT NULL,
  PRIMARY KEY (`ID_PATH_ROLE`),
  KEY `ID_PATH` (`ID_PATH`),
  KEY `ID_ROLE` (`ID_ROLE`),
  CONSTRAINT `PATHS_ROLES_ibfk_1` FOREIGN KEY (`ID_PATH`) REFERENCES `PATHS` (`ID_PATH`),
  CONSTRAINT `PATHS_ROLES_ibfk_2` FOREIGN KEY (`ID_ROLE`) REFERENCES `ROLES` (`ID_ROLE`)
) ENGINE=InnoDB AUTO_INCREMENT=67 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;


-- tiendapp.STORES definition

CREATE TABLE `STORES` (
  `ID_STORE` int unsigned NOT NULL AUTO_INCREMENT,
  `STORE_NAME` varchar(100) DEFAULT NULL,
  `CREATED_AT` timestamp NULL DEFAULT NULL,
  `URL` varchar(300) DEFAULT NULL,
  `MONGO_ID` varchar(24) DEFAULT NULL,
  `ID_USER` int unsigned DEFAULT NULL,
  PRIMARY KEY (`ID_STORE`),
  KEY `ID_USER` (`ID_USER`),
  CONSTRAINT `STORES_ibfk_1` FOREIGN KEY (`ID_USER`) REFERENCES `USERS` (`ID_USER`)
) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;


-- tiendapp.USERS_ROLES definition

CREATE TABLE `USERS_ROLES` (
  `ID_USER_ROLE` int unsigned NOT NULL AUTO_INCREMENT,
  `ID_USER` int unsigned DEFAULT NULL,
  `ID_ROLE` int unsigned DEFAULT NULL,
  `ID_STORE` int unsigned DEFAULT NULL,
  PRIMARY KEY (`ID_USER_ROLE`),
  KEY `ID_USER` (`ID_USER`),
  KEY `ID_ROLE` (`ID_ROLE`),
  KEY `ID_STORE` (`ID_STORE`),
  CONSTRAINT `USERS_ROLES_ibfk_1` FOREIGN KEY (`ID_USER`) REFERENCES `USERS` (`ID_USER`),
  CONSTRAINT `USERS_ROLES_ibfk_2` FOREIGN KEY (`ID_ROLE`) REFERENCES `ROLES` (`ID_ROLE`),
  CONSTRAINT `USERS_ROLES_ibfk_3` FOREIGN KEY (`ID_STORE`) REFERENCES `STORES` (`ID_STORE`)
) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;


-- tiendapp.USERS_STORES definition

CREATE TABLE `USERS_STORES` (
  `ID_USERS_STORES` int unsigned NOT NULL AUTO_INCREMENT,
  `ID_USER` int unsigned DEFAULT NULL,
  `ID_STORE` int unsigned DEFAULT NULL,
  `ID_PAR_USER_TYPE` int unsigned DEFAULT NULL,
  PRIMARY KEY (`ID_USERS_STORES`),
  KEY `ID_USER` (`ID_USER`),
  KEY `ID_STORE` (`ID_STORE`),
  KEY `ID_PAR_USER_TYPE` (`ID_PAR_USER_TYPE`),
  CONSTRAINT `USERS_STORES_ibfk_1` FOREIGN KEY (`ID_USER`) REFERENCES `USERS` (`ID_USER`),
  CONSTRAINT `USERS_STORES_ibfk_2` FOREIGN KEY (`ID_STORE`) REFERENCES `STORES` (`ID_STORE`),
  CONSTRAINT `USERS_STORES_ibfk_3` FOREIGN KEY (`ID_PAR_USER_TYPE`) REFERENCES `PAR_USER_TYPE` (`ID_PAR_USER_TYPE`)
) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;


-- tiendapp.BILLS definition

CREATE TABLE `BILLS` (
  `ID_BILL` int unsigned NOT NULL AUTO_INCREMENT,
  `CUSTOMER_ID` varchar(50) DEFAULT NULL,
  `CUSTOMER_NAME` varchar(100) DEFAULT NULL,
  `CUSTOMER_PHONE` varchar(15) DEFAULT NULL,
  `CUSTOMER_ADDRESS` varchar(200) DEFAULT NULL,
  `AMMOUNT` bigint unsigned DEFAULT NULL,
  `CREATED_AT` timestamp NULL DEFAULT NULL,
  `ID_STATUS` int unsigned DEFAULT NULL,
  `CODE` varchar(70) DEFAULT NULL,
  `ID_STORE` int unsigned DEFAULT NULL,
  PRIMARY KEY (`ID_BILL`),
  KEY `ID_STATUS` (`ID_STATUS`),
  KEY `ID_STORE` (`ID_STORE`),
  CONSTRAINT `BILLS_ibfk_1` FOREIGN KEY (`ID_STATUS`) REFERENCES `PAR_STATUS` (`ID_STATUS`),
  CONSTRAINT `BILLS_ibfk_2` FOREIGN KEY (`ID_STORE`) REFERENCES `STORES` (`ID_STORE`)
) ENGINE=InnoDB AUTO_INCREMENT=126 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;


-- tiendapp.CATEGORIES definition

CREATE TABLE `CATEGORIES` (
  `ID_CATEGORY` int unsigned NOT NULL AUTO_INCREMENT,
  `CATEGORY_NAME` varchar(200) DEFAULT NULL,
  `CATEGORY_DESCRIPTION` text,
  `ID_CATEGORY_PARENT` int unsigned DEFAULT NULL,
  `ID_STORE` int unsigned DEFAULT NULL,
  `MONGO_ID` varchar(24) DEFAULT NULL,
  `IMG_SRC` varchar(500) DEFAULT NULL,
  PRIMARY KEY (`ID_CATEGORY`),
  KEY `ID_STORE` (`ID_STORE`),
  KEY `ID_CATEGORY_PARENT` (`ID_CATEGORY_PARENT`),
  CONSTRAINT `CATEGORIES_ibfk_1` FOREIGN KEY (`ID_STORE`) REFERENCES `STORES` (`ID_STORE`),
  CONSTRAINT `CATEGORIES_ibfk_2` FOREIGN KEY (`ID_CATEGORY_PARENT`) REFERENCES `CATEGORIES` (`ID_CATEGORY`)
) ENGINE=InnoDB AUTO_INCREMENT=59 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;


-- tiendapp.PRODUCTS definition

CREATE TABLE `PRODUCTS` (
  `ID_PRODUCT` int unsigned NOT NULL AUTO_INCREMENT,
  `PRODUCT_NAME` varchar(200) DEFAULT NULL,
  `PRODUCT_LINE` varchar(100) DEFAULT NULL,
  `PRODUCT_DESCRIPTION` text,
  `PRODUCT_BRAND` varchar(100) DEFAULT NULL,
  `PRODUCT_QUANTITY` float DEFAULT NULL,
  `PRODUCT_PRICE` float DEFAULT NULL,
  `PRODUCT_COST` float DEFAULT NULL,
  `PRODUCT_STOCK` int unsigned DEFAULT '0',
  `STOCK_ALERT` int unsigned DEFAULT '0',
  `PRODUCT_OFF` float DEFAULT '0',
  `PRODUCT_CODE` varchar(20) DEFAULT NULL,
  `ID_STORE` int unsigned DEFAULT NULL,
  `ID_CATEGORY` int unsigned DEFAULT NULL,
  `MONGO_ID` varchar(24) DEFAULT NULL,
  `ACTIVE` smallint unsigned DEFAULT '1',
  `IMG_SRC` varchar(500) DEFAULT NULL,
  PRIMARY KEY (`ID_PRODUCT`),
  KEY `ID_STORE` (`ID_STORE`),
  KEY `ID_CATEGORY` (`ID_CATEGORY`),
  FULLTEXT KEY `PRODUCT_NAME` (`PRODUCT_NAME`),
  FULLTEXT KEY `PRODUCT_BRAND` (`PRODUCT_BRAND`),
  FULLTEXT KEY `PRODUCT_BRAND_2` (`PRODUCT_BRAND`),
  FULLTEXT KEY `PRODUCT_BRAND_3` (`PRODUCT_BRAND`),
  FULLTEXT KEY `PRODUCT_NAME_2` (`PRODUCT_NAME`,`PRODUCT_BRAND`),
  CONSTRAINT `PRODUCTS_ibfk_1` FOREIGN KEY (`ID_STORE`) REFERENCES `STORES` (`ID_STORE`),
  CONSTRAINT `PRODUCTS_ibfk_2` FOREIGN KEY (`ID_CATEGORY`) REFERENCES `CATEGORIES` (`ID_CATEGORY`)
) ENGINE=InnoDB AUTO_INCREMENT=17 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;


-- tiendapp.PRODUCTS_CATEGORIES definition

CREATE TABLE `PRODUCTS_CATEGORIES` (
  `ID_PRODUCT_CATEGORY` int unsigned NOT NULL AUTO_INCREMENT,
  `ID_PRODUCT` int unsigned DEFAULT NULL,
  `ID_CATEGORY` int unsigned DEFAULT NULL,
  PRIMARY KEY (`ID_PRODUCT_CATEGORY`),
  KEY `ID_PRODUCT` (`ID_PRODUCT`),
  KEY `ID_CATEGORY` (`ID_CATEGORY`),
  CONSTRAINT `PRODUCTS_CATEGORIES_ibfk_1` FOREIGN KEY (`ID_PRODUCT`) REFERENCES `PRODUCTS` (`ID_PRODUCT`),
  CONSTRAINT `PRODUCTS_CATEGORIES_ibfk_2` FOREIGN KEY (`ID_CATEGORY`) REFERENCES `CATEGORIES` (`ID_CATEGORY`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;


-- tiendapp.BILLS_DETAIL definition

CREATE TABLE `BILLS_DETAIL` (
  `ID_BILL_DETAIL` int unsigned NOT NULL AUTO_INCREMENT,
  `ID_BILL` int unsigned DEFAULT NULL,
  `ID_PRODUCT` int unsigned DEFAULT NULL,
  `PRICE` int unsigned DEFAULT NULL,
  `FINAL_PRICE` int unsigned DEFAULT NULL,
  `COST` int unsigned DEFAULT NULL,
  `UNITS` int unsigned DEFAULT NULL,
  `OFF` float DEFAULT NULL,
  `DESCRIPTION` varchar(200) DEFAULT NULL,
  PRIMARY KEY (`ID_BILL_DETAIL`),
  KEY `ID_BILL` (`ID_BILL`),
  KEY `ID_PRODUCT` (`ID_PRODUCT`),
  CONSTRAINT `BILLS_DETAIL_ibfk_1` FOREIGN KEY (`ID_BILL`) REFERENCES `BILLS` (`ID_BILL`),
  CONSTRAINT `BILLS_DETAIL_ibfk_2` FOREIGN KEY (`ID_PRODUCT`) REFERENCES `PRODUCTS` (`ID_PRODUCT`)
) ENGINE=InnoDB AUTO_INCREMENT=280 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;


CREATE PROCEDURE `SP_BILLS_ADD_PRODUCT_TO_BILL`(nIdBill INT UNSIGNED, nIdProduct INT UNSIGNED, 
	nUnits INT UNSIGNED, vDescription VARCHAR(200), nOff INT)
BEGIN
	DECLARE actualPrice BIGINT UNSIGNED DEFAULT 0;
	DECLARE nPrice BIGINT UNSIGNED DEFAULT 0;
	DECLARE nAmmount BIGINT UNSIGNED DEFAULT 0;
	DECLARE nCost BIGINT UNSIGNED DEFAULT 0;
	DECLARE nIdStatus INT UNSIGNED DEFAULT 0;
	SELECT B.ID_STATUS INTO nIdStatus FROM BILLS B WHERE B.ID_BILL = nIdBill;
	IF nIdStatus = nIdStatus THEN
		SELECT ROUND((1-nOff/100)*P.PRODUCT_PRICE), P.PRODUCT_COST, P.PRODUCT_PRICE INTO nPrice, nCost, actualPrice FROM PRODUCTS P WHERE P.ID_PRODUCT = nIdProduct;
		SELECT B.AMMOUNT INTO nAmmount FROM BILLS B WHERE B.ID_BILL = nIdBill;
		START TRANSACTION;
		UPDATE BILLS B SET B.AMMOUNT = (nAmmount + (nPrice*nUnits)) WHERE B.ID_BILL = nIdBill;
		COMMIT;
		INSERT INTO BILLS_DETAIL(ID_BILL_DETAIL, ID_BILL, ID_PRODUCT, PRICE, FINAL_PRICE, COST, UNITS, OFF, DESCRIPTION) VALUES
			(NULL, nIdBill, nIdProduct, actualPrice, nPrice, nCost, nUnits, nOff,vDescription);
		START TRANSACTION;
		UPDATE PRODUCTS P SET P.PRODUCT_STOCK = P.PRODUCT_STOCK - nUnits WHERE P.ID_PRODUCT = nIdProduct;
		CALL SP_BILLS_CALC_AMMOUNT(nIdBill);
		COMMIT;	
		SELECT 0 AS ERROR, 'Product added to bill sucessfuly' AS MESSAGE FROM DUAL;
	ELSE
		SELECT 1 AS ERROR, 'Factura no está abierta' AS MESSAGE FROM DUAL;
	END IF;
END;

CREATE PROCEDURE `SP_BILLS_CALC_AMMOUNT`(nIdBill INT UNSIGNED)
BEGIN
	DECLARE nTotal INT UNSIGNED DEFAULT 0;
	SELECT SUM(FINAL_PRICE * UNITS) INTO nTotal FROM BILLS_DETAIL BD WHERE BD.ID_BILL = nIdBill;	
	UPDATE BILLS B SET B.AMMOUNT = nTotal WHERE ID_BILL = nIdBill;
END;

CREATE PROCEDURE `SP_BILLS_CHANGE_STATUS`(nIdBill INT UNSIGNED, nIdStatus INT UNSIGNED)
BEGIN
	UPDATE BILLS SET ID_STATUS = nIdStatus WHERE ID_BILL = nIdBill;
	CALL SP_BILLS_CALC_AMMOUNT(nIdBill);
	COMMIT;
	SELECT 0 AS ERROR, CONCAT('Estado de factura cambiado a ', PS.DESCRIPTION, ' - ', PS.CODE) AS MESSAGE FROM PAR_STATUS PS WHERE PS.ID_STATUS = nIdStatus;
END;

CREATE PROCEDURE `SP_BILLS_CREATE_BILL`(nIdStore INT UNSIGNED, vCustomerId VARCHAR(50), 
	vCustomerName VARCHAR(100), vCustomerPhone VARCHAR(15), 
	vCustomerAddress VARCHAR(200))
BEGIN
	DECLARE vCode VARCHAR(70) DEFAULT '';
	SELECT ROUND(UNIX_TIMESTAMP(CURTIME(4)) * 1000) INTO vCode FROM DUAL;
	SET vCode = CONCAT(vCode, vCustomerId);
	INSERT INTO BILLS(ID_BILL, CUSTOMER_ID, CUSTOMER_NAME, CUSTOMER_PHONE, CUSTOMER_ADDRESS, AMMOUNT, CREATED_AT, ID_STATUS, CODE, ID_STORE) VALUES
	(NULL, vCustomerId, vCustomerName, vCustomerPhone, vCustomerAddress, 0, CURRENT_TIMESTAMP(), 9, vCode, nIdStore);
	COMMIT;
	SELECT 0 AS ERROR, 'BILL CREATED SUCCESFULY' AS MESSAGE, ID_BILL, CODE FROM BILLS WHERE CODE = vCode; 
END;

CREATE PROCEDURE `SP_BILLS_DEL_PRODUCT_FROM_BILL`(nIdBill INT UNSIGNED, nIdBillDetail INT UNSIGNED)
BEGIN
	DECLARE nUnits INT UNSIGNED DEFAULT 0;
	DECLARE nIdProduct INT UNSIGNED DEFAULT 0;
	DECLARE nPrice INT UNSIGNED DEFAULT 0;
	DECLARE nAmmount INT UNSIGNED DEFAULT 0;
	
	SELECT BD.UNITS, BD.ID_PRODUCT, BD.PRICE INTO nUnits, nIdProduct, nPrice FROM BILLS_DETAIL BD WHERE ID_BILL = nIdBill AND ID_BILL_DETAIL = nIdBillDetail;
	DELETE FROM BILLS_DETAIL BD WHERE BD.ID_BILL_DETAIL = nIdBillDetail;
	COMMIT;

	SET nAmmount = nPrice * nUnits;
	UPDATE BILLS B SET B.AMMOUNT = B.AMMOUNT - nAmmount WHERE ID_BILL = nIdBill;
	UPDATE PRODUCTS P SET P.PRODUCT_STOCK = P.PRODUCT_STOCK + nUnits WHERE P.ID_PRODUCT = nIdProduct;
	COMMIT;
	SELECT 0 AS ERROR, 'Producto elimindado correctamente de la factura' AS MESSAGE FROM DUAL;
END;

CREATE PROCEDURE `SP_BILLS_FIND_BILL`(nIdStore INT UNSIGNED, vQuery VARCHAR(100))
BEGIN
	SELECT * FROM BILLS B WHERE B.ID_STORE = nIdStore AND (UPPER(B.CODE) LIKE CONCAT('%', UPPER(vQuery), '%')
	OR UPPER(B.CUSTOMER_NAME) LIKE CONCAT('%', UPPER(vQuery), '%') OR UPPER(B.CUSTOMER_PHONE) LIKE CONCAT('%', UPPER(vQuery), '%')
	OR UPPER(B.CUSTOMER_ID) LIKE CONCAT('%', UPPER(vQuery), '%')) LIMIT 10;
END;

CREATE PROCEDURE `SP_BILLS_GET_BILL`(nIdStore INT UNSIGNED, nIdBill INT UNSIGNED)
BEGIN
	SELECT * FROM BILLS B WHERE B.ID_STORE = nIdStore AND B.ID_BILL = nIdBill LIMIT 1;
END;

CREATE PROCEDURE `SP_BILLS_GET_BILL_DETAIL`(nIdStore INT UNSIGNED, nIdBill INT UNSIGNED)
BEGIN
	SELECT P.PRODUCT_NAME, BD.ID_BILL_DETAIL, BD.ID_BILL, BD.ID_PRODUCT, P.PRODUCT_PRICE AS PRICE, BD.COST, BD.UNITS, BD.OFF, BD.DESCRIPTION
FROM BILLS_DETAIL BD INNER JOIN BILLS B ON B.ID_BILL = BD.ID_BILL INNER JOIN PRODUCTS P ON P.ID_PRODUCT = BD.ID_PRODUCT WHERE BD.ID_BILL = nIdBill;	
END;

CREATE PROCEDURE `SP_BILLS_GET_BY_STORE`(nIdStore INT UNSIGNED, nPage INT UNSIGNED)
BEGIN
	DECLARE nOffset INT DEFAULT 0;
	DECLARE nMaxProducts INT DEFAULT 20;	

	SET nOffset = nMaxProducts * (nPage-1);

	SELECT * FROM BILLS B WHERE B.ID_STORE = nIdStore AND B.ID_STATUS = 4 ORDER BY B.CREATED_AT DESC LIMIT nOffset, nMaxProducts;
	SELECT nPage AS ACTUAL_PAGE, FLOOR(COUNT(*)/nMaxProducts)+1 AS LAST_PAGE, COUNT(*) AS TOTAL_COUNT FROM BILLS B WHERE B.ID_STORE = nIdStore AND B.ID_STATUS = 4;
END;

CREATE PROCEDURE `SP_BILLS_GET_OPEN_BILLS`(nIdStore INT UNSIGNED, nPage INT UNSIGNED)
BEGIN
	DECLARE nOffset INT DEFAULT 0;
	DECLARE nMaxProducts INT DEFAULT 20;

	SET nOffset = nMaxProducts * (nPage - 1);

	SELECT * FROM BILLS B WHERE B.ID_STATUS = 9 AND B.ID_STORE = nIdStore LIMIT nOffset, nMaxProducts;
	SELECT nPage AS ACTUAL_PAGE, FLOOR(COUNT(*)/nMaxProducts)+1 AS LAST_PAGE, COUNT(*) AS TOTAL_COUNT FROM BILLS B WHERE B.ID_STORE = nIdStore AND B.ID_STATUS = 9;
END;

CREATE PROCEDURE `SP_BILLS_UPDATE_PRODUCT_FROM_BILL`(nIdBill INT UNSIGNED, 
	nIdBillDetail INT UNSIGNED, nUnits INT UNSIGNED, vDescription VARCHAR(200), nOff DOUBLE)
BEGIN
	DECLARE nActualUnits INT UNSIGNED DEFAULT 0;
	DECLARE nActualAmmount INT UNSIGNED DEFAULT 0;
	DECLARE nPrice INT UNSIGNED DEFAULT 0;
	DECLARE nDiff INT UNSIGNED DEFAULT 0;
	DECLARE nIdProduct INT UNSIGNED DEFAULT 0;
	DECLARE nActualPrice INT UNSIGNED DEFAULT 0;
	DECLARE nActualFinalPrice INT UNSIGNED DEFAULT 0;
	DECLARE nActualOff INT DEFAULT 0;
	DECLARE nActualTotal INT UNSIGNED DEFAULT 0;

	SELECT B.AMMOUNT, BD.PRICE, BD.UNITS, BD.OFF, BD.FINAL_PRICE, BD.ID_PRODUCT  INTO nActualAmmount, nActualPrice, 
	nActualUnits, nActualOff, nActualFinalPrice, nIdProduct
	FROM BILLS_DETAIL BD INNER JOIN BILLS B ON B.ID_BILL = BD.ID_BILL WHERE BD.ID_BILL_DETAIL = nIdBillDetail;
	SET nActualTotal := nActualFinalPrice * nActualUnits;
	/*UPDATE BILLS B SET B.AMMOUNT = (nActualAmmount - nActualTotal) + ROUND(nActualPrice * (1-nOff/100) * nUnits) WHERE B.ID_BILL = nIdBill;*/
	UPDATE BILLS_DETAIL BD SET BD.FINAL_PRICE = ROUND(nActualPrice * (1-nOff/100)), BD.UNITS = nUnits, BD.OFF = nOff,
	BD.DESCRIPTION = vDescription
	WHERE BD.ID_BILL_DETAIL = nIdBillDetail;
	UPDATE PRODUCTS P SET P.PRODUCT_STOCK = P.PRODUCT_STOCK + (nActualUnits - nUnits) WHERE P.ID_PRODUCT = nIdProduct;
	COMMIT;

	SELECT 0 AS ERROR, 'Factura actualizada correctamente' AS MESSAGE FROM DUAL;
END;

CREATE PROCEDURE `SP_CATEGORIES_GET_BY_PARENT`(IN  idCategoryParent 	INT,
											 OUT nError				INT,
											 OUT vMessage			VARCHAR(100))
BEGIN
	SELECT C.ID_CATEGORY, C.CATEGORY_NAME, C.CATEGORY_DESCRIPTION, C.ID_CATEGORY_PARENT, C.ID_STORE, C.MONGO_ID, C.IMG_SRC 
	FROM CATEGORIES C WHERE (idCategoryParent IS NOT NULL AND C.ID_CATEGORY_PARENT = idCategoryParent) OR (idCategoryParent IS NULL AND C.ID_CATEGORY_PARENT IS NULL);
	SET nError = 0;
	SET vMessage = 'FETCH';
END;

CREATE PROCEDURE `SP_CATEGORIES_GET_BY_STORE`(IN  nIdStore	INT,
											OUT nError		INT,
											OUT vMessage	VARCHAR(200))
BEGIN 
	SELECT C.ID_CATEGORY, C.CATEGORY_NAME, C.CATEGORY_DESCRIPTION, C.ID_CATEGORY_PARENT, C.ID_STORE, C.MONGO_ID, C.IMG_SRC 
		FROM CATEGORIES C WHERE C.ID_STORE = nIdStore AND C.ID_CATEGORY_PARENT IS NULL;
	SET nError = 0;
	SET vMessage = 'FETCH';
END;

CREATE PROCEDURE `SP_CATEGORIES_GET_BY_STORE_ALL`(IN  nIdStore	INT,
											OUT nError		INT,
											OUT vMessage	VARCHAR(200))
BEGIN 
	SELECT C.ID_CATEGORY, C.CATEGORY_NAME, C.CATEGORY_DESCRIPTION, C.ID_CATEGORY_PARENT, C.ID_STORE, C.MONGO_ID, C.IMG_SRC
		FROM CATEGORIES C WHERE C.ID_STORE = nIdStore;
	SET nError = 0;
	SET vMessage = 'FETCH';
END;

CREATE PROCEDURE `SP_CATEGORIES_GET_COMMONS`(OUT nError	INT,
										   OUT vMessage VARCHAR(100))
BEGIN 
	SELECT C.ID_CATEGORY, C.CATEGORY_NAME, C.CATEGORY_DESCRIPTION, C.ID_CATEGORY_PARENT, C.ID_STORE, C.MONGO_ID, C.IMG_SRC FROM CATEGORIES C WHERE C.ID_STORE IS NULL;
	SET nError = 0;
	SET vMessage = 'FETCH';
END;

CREATE PROCEDURE `SP_CATEGORIES_INSERT`(IN  vCategoryName			VARCHAR(200),
									  IN  vCategoryDescription	TEXT,
									  IN  nIdCategoryParent		INT,
									  IN  nIdStore				INT,
									  IN  vMongoId				VARCHAR(24),
									  IN  vImgSrc				VARCHAR(500),
									  OUT nError				INT,
									  OUT vMessage				VARCHAR(100))
BEGIN
	DECLARE nRowCount INT DEFAULT 0;
	SELECT COUNT(*) INTO nRowCount FROM CATEGORIES C WHERE (nIdStore IS NOT NULL AND C.ID_STORE = nIdStore) AND LOWER(C.CATEGORY_NAME) = LOWER(vCategoryName);
	IF(nRowCount>0) THEN
		SET nError = 1;
		SET vMessage = 'Category already exists';
	ELSE
		INSERT INTO CATEGORIES(CATEGORY_NAME, CATEGORY_DESCRIPTION, ID_CATEGORY_PARENT, ID_STORE, MONGO_ID, IMG_SRC) 
			VALUES (vCategoryName, vCategoryDescription, nIdCategoryParent,nIdStore, vMongoId, vImgSrc);
		SET nError = 0;
		SET vMessage = 'Category added correctly';
	END IF;
	SELECT nError AS ERROR, vMessage AS MESSAGE;
END;

CREATE PROCEDURE `SP_CATEGORIES_UPDATE`(IN  nIdCategory 			INT,
									  IN  vCategoryName 		VARCHAR(200),
									  IN  vCategoryDescription 	TEXT,
									  IN  nIdParent				INT,
									  IN  vImgSrc				VARCHAR(500),
									  OUT nError				INT,
									  OUT vMessage 				VARCHAR(100))
BEGIN 
	DECLARE nRowCount INT DEFAULT 0;
	SELECT COUNT(*) INTO nRowCount FROM CATEGORIES C WHERE C.ID_CATEGORY = nIdCategory;
	IF nRowCount > 0 THEN
		UPDATE CATEGORIES C SET CATEGORY_NAME = IFNULL(vCategoryName, C.CATEGORY_NAME), 
			C.CATEGORY_DESCRIPTION = IFNULL(vCategoryDescription, C.CATEGORY_DESCRIPTION), C.ID_CATEGORY_PARENT = IFNULL(nIdParent, C.ID_CATEGORY_PARENT),
			C.IMG_SRC = IFNULL(vImgSrc, C.IMG_SRC)
			WHERE ID_CATEGORY = nIdCategory;
		SET nError = 0;
		SET vMessage = 'Category updated correctly';
	ELSE
		SET nError = 1;
		SET vMessage = 'Category does not exits';
	END IF;
	SELECT nError AS ERROR, vMessage AS MESSAGE;
END;

CREATE PROCEDURE `SP_GET_STORES_BY_USER`(IN  nIdUser	VARCHAR(100),
										 OUT nError		INT,
										 OUT vMessage	VARCHAR(100))
BEGIN
	DECLARE nRowCount INT DEFAULT 0;

	SELECT * FROM STORES S INNER JOIN USERS_STORES US ON (S.ID_STORE = US.ID_STORE) WHERE US.ID_USER = nIdUser;
	SELECT FOUND_ROWS() INTO nRowCount;
	IF(nRowCount>0) THEN 
		SET nError = 0;
		SET vMessage = 'Has roles';
	ELSE
		SET nError = 1;
		SET vMessage = 'Has not roles';
	END IF;
END;

CREATE PROCEDURE `SP_PRODUCTS_DELETE`(IN nIdStore INT UNSIGNED, IN nIdProduct INT UNSIGNED,
											   OUT nError INT, OUT vMessage VARCHAR(100))
BEGIN 
	DECLARE nRowCount INT DEFAULT  0;
	SELECT COUNT(*) INTO nRowCount FROM PRODUCTS P WHERE P.ID_PRODUCT = nIdProduct AND P.ID_STORE = nIdStore;
	
	IF nRowCount > 0 THEN
		UPDATE PRODUCTS P SET P.ACTIVE = 0 WHERE P.ID_PRODUCT = nIdProduct AND P.ID_STORE = nIdStore;
		SET nError = 0;
		SET vMessage = 'Product delete succesfuly';
	ELSE
		SET nError = 1;
		SET vMessage = 'Nothing to delete';
	END IF;
	SELECT nError AS ERROR, vMessage AS MESSAGE;
END;

CREATE PROCEDURE `SP_PRODUCTS_FIND_PRODUCTS`(IN  nIdStore		INT UNSIGNED,
										   IN  vSearchInput VARCHAR(200),
										   OUT nError 		INT,
										   OUT vMessage		VARCHAR(100))
BEGIN
	SELECT P.ID_PRODUCT, P.PRODUCT_NAME, P.PRODUCT_LINE, P.PRODUCT_DESCRIPTION, P.PRODUCT_BRAND, P.PRODUCT_QUANTITY,
	P.PRODUCT_PRICE, P.PRODUCT_COST, P.PRODUCT_STOCK, P.STOCK_ALERT, P.PRODUCT_OFF, P.PRODUCT_CODE, P.ID_STORE, P.ID_CATEGORY,
	P.MONGO_ID, P.ACTIVE, P.IMG_SRC FROM PRODUCTS P WHERE LOWER(P.PRODUCT_NAME) LIKE CONCAT('%', LOWER(vSearchInput), '%') 
	OR LOWER(P.PRODUCT_CODE) = LOWER(vSearchInput)
	OR LOWER(P.PRODUCT_BRAND) LIKE CONCAT('%', LOWER(vSearchInput), '%')
	AND P.ID_STORE = nIdStore AND P.ACTIVE = 1
	UNION
	SELECT P.ID_PRODUCT, P.PRODUCT_NAME, P.PRODUCT_LINE, P.PRODUCT_DESCRIPTION, P.PRODUCT_BRAND, P.PRODUCT_QUANTITY,
	P.PRODUCT_PRICE, P.PRODUCT_COST, P.PRODUCT_STOCK, P.STOCK_ALERT, P.PRODUCT_OFF, P.PRODUCT_CODE, P.ID_STORE, P.ID_CATEGORY,
	P.MONGO_ID, P.ACTIVE, P.IMG_SRC FROM (
		SELECT *, 
	       MATCH (PRODUCT_NAME, PRODUCT_BRAND) AGAINST (vSearchInput IN BOOLEAN MODE) AS RELEVANCE
		   FROM PRODUCTS WHERE ID_STORE = nIdStore AND ACTIVE = 1 HAVING RELEVANCE > 0 ORDER BY RELEVANCE DESC LIMIT 20
	) P;
	SET nError = 0;
	SET vMessage = 'FETCH';
END;

CREATE PROCEDURE `SP_PRODUCTS_FIND_PRODUCTS_BY_CATEGORY`(IN  nIdStore		INT UNSIGNED,
										   IN nIdCategory 	INT UNSIGNED,
										   IN  vSearchInput VARCHAR(200),
										   OUT nError 		INT,
										   OUT vMessage		VARCHAR(100))
BEGIN
	SELECT P.ID_PRODUCT, P.PRODUCT_NAME, P.PRODUCT_LINE, P.PRODUCT_DESCRIPTION, P.PRODUCT_BRAND, P.PRODUCT_QUANTITY,
	P.PRODUCT_PRICE, P.PRODUCT_COST, P.PRODUCT_STOCK, P.STOCK_ALERT, P.PRODUCT_OFF, P.PRODUCT_CODE, P.ID_STORE, P.ID_CATEGORY,
	P.MONGO_ID, P.ACTIVE, P.IMG_SRC FROM PRODUCTS P WHERE P.ACTIVE = 1 AND LOWER(P.PRODUCT_NAME) LIKE CONCAT('%', vSearchInput, '%')
	OR LOWER(P.PRODUCT_CODE) = LOWER(vSearchInput)
	OR P.PRODUCT_BRAND LIKE CONCAT('%', vSearchInput, '%') AND 
	(P.ID_CATEGORY IN (SELECT ID_CATEGORY FROM CATEGORIES C WHERE C.ID_CATEGORY_PARENT = nIdCategory)
		OR P.ID_CATEGORY IN (SELECT ID_CATEGORY FROM CATEGORIES C2 WHERE C2.ID_CATEGORY_PARENT IN (SELECT ID_CATEGORY FROM CATEGORIES C WHERE C.ID_CATEGORY_PARENT = nIdCategory))) 
	UNION
	SELECT P.ID_PRODUCT, P.PRODUCT_NAME, P.PRODUCT_LINE, P.PRODUCT_DESCRIPTION, P.PRODUCT_BRAND, P.PRODUCT_QUANTITY,
	P.PRODUCT_PRICE, P.PRODUCT_COST, P.PRODUCT_STOCK, P.STOCK_ALERT, P.PRODUCT_OFF, P.PRODUCT_CODE, P.ID_STORE, P.ID_CATEGORY,
	P.MONGO_ID, P.ACTIVE, P.IMG_SRC FROM(
	SELECT *, 
       MATCH (PRODUCT_NAME, PRODUCT_BRAND) AGAINST (vSearchInput IN BOOLEAN MODE) AS RELEVANCE
	   FROM PRODUCTS P WHERE ID_STORE = nIdStore AND ACTIVE = 1 AND
	   ID_CATEGORY = nIdCategory OR 
	   (P.ID_CATEGORY IN (SELECT ID_CATEGORY FROM CATEGORIES C WHERE C.ID_CATEGORY_PARENT = nIdCategory)
		OR P.ID_CATEGORY IN (SELECT ID_CATEGORY FROM CATEGORIES C2 WHERE C2.ID_CATEGORY_PARENT IN (SELECT ID_CATEGORY FROM CATEGORIES C WHERE C.ID_CATEGORY_PARENT = nIdCategory)))
		HAVING RELEVANCE > 0
	   ORDER BY RELEVANCE DESC LIMIT 20
	) P;
	SET nError = 0;
	SET vMessage = 'FETCH';
END;

CREATE PROCEDURE `SP_PRODUCTS_GET_BY_CATEGORY`(IN  nIdStore		INT,
											 IN  nIdCategory 	INT,
											 IN  nPage			INT,
											 OUT nError			INT,
											 OUT vMessage		VARCHAR(100))
BEGIN
	DECLARE nRowCount INT DEFAULT 0;
	DECLARE nOffset INT DEFAULT 0;
	DECLARE nMaxProducts INT DEFAULT 20;	

	SET nOffset = nMaxProducts * (nPage-1);

	SELECT P.ID_PRODUCT, P.PRODUCT_NAME, P.PRODUCT_LINE, P.PRODUCT_DESCRIPTION, P.PRODUCT_BRAND, 
		P.PRODUCT_QUANTITY, P.PRODUCT_PRICE, P.PRODUCT_COST, P.PRODUCT_STOCK, P.STOCK_ALERT, P.PRODUCT_OFF, P.PRODUCT_CODE,
		P.ID_CATEGORY, P.MONGO_ID, P.ACTIVE, P.IMG_SRC FROM PRODUCTS P WHERE P.ACTIVE = 1 AND P.ID_STORE = nIdStore AND (P.ID_CATEGORY = nIdCategory OR 
		P.ID_CATEGORY IN (SELECT ID_CATEGORY FROM CATEGORIES C WHERE C.ID_CATEGORY_PARENT = nIdCategory)
		OR P.ID_CATEGORY IN (SELECT ID_CATEGORY FROM CATEGORIES C2 WHERE C2.ID_CATEGORY_PARENT IN (SELECT ID_CATEGORY FROM CATEGORIES C WHERE C.ID_CATEGORY_PARENT = nIdCategory))
		)
		UNION
		SELECT P2.ID_PRODUCT, P2.PRODUCT_NAME, P2.PRODUCT_LINE, P2.PRODUCT_DESCRIPTION, P2.PRODUCT_BRAND, 
		P2.PRODUCT_QUANTITY, P2.PRODUCT_PRICE, P2.PRODUCT_COST, P2.PRODUCT_STOCK, P2.STOCK_ALERT, P2.PRODUCT_OFF, P2.PRODUCT_CODE,
		P2.ID_CATEGORY, P2.MONGO_ID, P2.ACTIVE, P2.IMG_SRC FROM PRODUCTS P2 INNER JOIN PRODUCTS_CATEGORIES PC ON (PC.ID_PRODUCT = P2.ID_PRODUCT)
		WHERE P2.ID_CATEGORY = nIdCategory AND P2.ACTIVE = 1
		LIMIT nOffset, nMaxProducts;
	SET nError = 0;
	SET vMessage = 'FETCH';
END;

CREATE PROCEDURE `SP_PRODUCTS_GET_BY_CATEGORY_FILTER`(IN  nIdStore		INT UNSIGNED,
													 in  nIdCategory 	INT UNSIGNED,
													 IN  fOff			FLOAT,
													 IN  vBrand			VARCHAR(100),
													 IN  nPage			INT UNSIGNED,
													 OUT nError			INT,
													 OUT vMessage		VARCHAR(100))
BEGIN
	DECLARE nOffset INT DEFAULT 0;
	DECLARE nMaxProducts INT DEFAULT 20;

	SET nOffset = nMaxProducts * (nPage - 1);

	SELECT P.ID_PRODUCT, P.PRODUCT_NAME, P.PRODUCT_LINE, P.PRODUCT_DESCRIPTION, P.PRODUCT_BRAND, 
		P.PRODUCT_QUANTITY, P.PRODUCT_PRICE, P.PRODUCT_COST, P.PRODUCT_STOCK, P.STOCK_ALERT, P.PRODUCT_OFF, P.PRODUCT_CODE,
		P.ID_CATEGORY, P.MONGO_ID, P.ACTIVE, P.IMG_SRC FROM PRODUCTS P WHERE P.ACTIVE = 1 AND P.ID_STORE = nIdStore AND (P.ID_CATEGORY = nIdCategory OR 
		P.ID_CATEGORY IN (SELECT ID_CATEGORY FROM CATEGORIES C WHERE C.ID_CATEGORY_PARENT = nIdCategory)
		OR P.ID_CATEGORY IN (SELECT ID_CATEGORY FROM CATEGORIES C2 WHERE C2.ID_CATEGORY_PARENT IN (SELECT ID_CATEGORY FROM CATEGORIES C WHERE C.ID_CATEGORY_PARENT = nIdCategory))
		)
		AND P.PRODUCT_OFF = IFNULL(fOff, P.PRODUCT_OFF) AND P.PRODUCT_BRAND = IFNULL(vBrand, P.PRODUCT_BRAND)  
		UNION
		SELECT P2.ID_PRODUCT, P2.PRODUCT_NAME, P2.PRODUCT_LINE, P2.PRODUCT_DESCRIPTION, P2.PRODUCT_BRAND, 
		P2.PRODUCT_QUANTITY, P2.PRODUCT_PRICE, P2.PRODUCT_COST, P2.PRODUCT_STOCK, P2.STOCK_ALERT, P2.PRODUCT_OFF, P2.PRODUCT_CODE,
		P2.ID_CATEGORY, P2.MONGO_ID, P2.ACTIVE, P2.IMG_SRC FROM PRODUCTS P2 INNER JOIN PRODUCTS_CATEGORIES PC ON (PC.ID_PRODUCT = P2.ID_PRODUCT)
		AND P2.PRODUCT_OFF = IFNULL(fOff, P2.PRODUCT_OFF) AND P2.PRODUCT_BRAND = IFNULL(vBrand, P2.PRODUCT_BRAND)
		WHERE P2.ACTIVE = 1
		LIMIT nOffset, nMaxProducts;
	SET nError = 0;
	SET vMessage = 'FETCH';
END;

CREATE PROCEDURE `SP_PRODUCTS_GET_BY_STORE`(IN  nIdStore		INT UNSIGNED,
										   IN  nPage		INT UNSIGNED,
										   OUT nError		INT,
										   OUT vMessage		VARCHAR(100))
BEGIN
	DECLARE nOffset INT DEFAULT 0;
	DECLARE nMaxProducts INT DEFAULT 20;

	SET nOffset = nMaxProducts * (nPage - 1);

	SELECT P.ID_PRODUCT, P.PRODUCT_NAME, P.PRODUCT_LINE, P.PRODUCT_DESCRIPTION, P.PRODUCT_BRAND, 
		P.PRODUCT_QUANTITY, P.PRODUCT_PRICE, P.PRODUCT_COST, P.PRODUCT_STOCK, P.STOCK_ALERT, P.PRODUCT_OFF, P.PRODUCT_CODE,
		P.ID_CATEGORY, P.MONGO_ID, P.ACTIVE, P.IMG_SRC, P.ID_STORE  FROM PRODUCTS P
	WHERE P.ID_STORE = nIdStore AND P.ACTIVE = 1
	LIMIT nOffset, nMaxProducts;
	SET nError = 0;
	SET vMessage = 'FETCH';
END;

CREATE PROCEDURE `SP_PRODUCTS_GET_BY_STORE_FILTER`(IN  nIdStore		INT UNSIGNED,
												  IN  fOff			FLOAT,
												  IN  vBrand		VARCHAR(100),
												  IN  nPage			INT UNSIGNED,
												  OUT nError		INT,
												  OUT vMessage		VARCHAR(100))
BEGIN
	DECLARE nOffset INT DEFAULT 0;
	DECLARE nMaxProducts INT DEFAULT 20;

	SET nOffset = nMaxProducts * (nPage - 1);

	SELECT P.ID_PRODUCT, P.PRODUCT_NAME, P.PRODUCT_LINE, P.PRODUCT_DESCRIPTION, P.PRODUCT_BRAND, 
		P.PRODUCT_QUANTITY, P.PRODUCT_PRICE, P.PRODUCT_COST, P.PRODUCT_STOCK, P.STOCK_ALERT, P.PRODUCT_OFF, P.PRODUCT_CODE,
		P.ID_CATEGORY, P.MONGO_ID, P.ACTIVE, P.IMG_SRC FROM PRODUCTS P
	WHERE P.ID_STORE = nIdStore AND P.ACTIVE = 1 AND P.PRODUCT_OFF >= IFNULL(fOff, P.PRODUCT_OFF) AND P.PRODUCT_BRAND = IFNULL(vBrand, P.PRODUCT_BRAND) 
	LIMIT nOffset, nMaxProducts;
	SET nError = 0;
	SET vMessage = 'FETCH';
END;

CREATE PROCEDURE `SP_PRODUCTS_GET_PRODUCT`(IN  nIdProduct INT UNSIGNED,
										 OUT nError 	INT,
										 OUT vMessage	VARCHAR(100))
BEGIN
	SELECT P.ID_PRODUCT, P.PRODUCT_NAME, P.PRODUCT_LINE, P.PRODUCT_DESCRIPTION, P.PRODUCT_BRAND, 
		P.PRODUCT_QUANTITY, P.PRODUCT_PRICE, P.PRODUCT_COST, P.PRODUCT_STOCK, P.STOCK_ALERT, P.PRODUCT_OFF, P.PRODUCT_CODE,
		P.ID_CATEGORY, P.MONGO_ID, P.ACTIVE, P.IMG_SRC FROM PRODUCTS P WHERE P.ID_PRODUCT = nIdProduct AND P.ACTIVE = 1;
	SET nError = 0;
	SET vMessage = 'FETCH';
END;

CREATE PROCEDURE `SP_PRODUCTS_INSERT`(IN  vProductName			VARCHAR(200),
									IN  vProductLine			VARCHAR(100),
									IN  vProductDescription 	TEXT,
									IN 	vProductBrand			VARCHAR(100),
									IN  fQuantity				FLOAT,
									IN  nProductPrice			FLOAT UNSIGNED,
									IN  nProductCost			FLOAT UNSIGNED,
									IN  nProductStock			INT UNSIGNED,
									IN  fOff					FLOAT,
									IN  vProductCode			VARCHAR(20),
									IN  nIdStore				INT UNSIGNED,
									IN  nIdCategory				INT UNSIGNED,
									IN  vMongoId				VARCHAR(24),
									IN  vImgSrc					VARCHAR(500),
									IN  nStockAlert				INT UNSIGNED,
									OUT nError					INT,
									OUT vMessage				VARCHAR(100))
BEGIN
	IF vProductName IS NULL OR vProductName = '' OR nProductPrice IS NULL OR nIdStore IS NULL THEN
		SET nError = 1;
		SET vMessage = 'Product has null items'; 
	ELSE
		INSERT INTO PRODUCTS (PRODUCT_NAME, PRODUCT_LINE, PRODUCT_DESCRIPTION, PRODUCT_BRAND, PRODUCT_QUANTITY, PRODUCT_PRICE, PRODUCT_COST,
			PRODUCT_STOCK, PRODUCT_OFF, PRODUCT_CODE, ID_STORE, ID_CATEGORY, MONGO_ID, ACTIVE, IMG_SRC, STOCK_ALERT) VALUES (vProductName, vProductLine, 
			vProductDescription, vProductBrand, fQuantity, 
			nProductPrice, nProductCost, nProductStock, fOff, vProductCode, nIdStore, nIdCategory, vMongoId, 1, vImgSrc, nStockAlert);
		SET nError = 0;
		SET vMessage = 'Product addes succesfuly';
	END IF;
	SELECT nError AS ERROR, vMessage AS MESSAGE;
END;

CREATE PROCEDURE `SP_PRODUCTS_UPDATE`(IN  nIdProduct				INT UNSIGNED,
									IN  vProductName			VARCHAR(200),
									IN  vProductLine			VARCHAR(100),
									IN  vProductDescription 	TEXT,
									IN 	vProductBrand			VARCHAR(100),
									IN  fQuantity				FLOAT,
									IN  nProductPrice			FLOAT,
									IN	nProductCost			FLOAT,
									IN  nProductStock			INT UNSIGNED,
									IN  fOff					FLOAT,
									IN  vProductCode			VARCHAR(20),
									IN  nIdCategory				INT UNSIGNED,
									IN	vImgSrc					VARCHAR(500),
									IN  nStockAlert				INT UNSIGNED,
									OUT nError					INT,
									OUT vMessage				VARCHAR(100))
BEGIN
	DECLARE nRowCount INT DEFAULT 0;
	SELECT COUNT(*) INTO nRowCount FROM PRODUCTS P WHERE P.ID_PRODUCT = nIdProduct;
	IF nRowCount > 0 THEN
		UPDATE PRODUCTS P SET P.PRODUCT_NAME = IFNULL(vProductName, P.PRODUCT_NAME),
			P.PRODUCT_LINE = IFNULL(vProductLine, P.PRODUCT_LINE),
			P.PRODUCT_DESCRIPTION = IFNULL (vProductDescription, P.PRODUCT_DESCRIPTION),
			P.PRODUCT_BRAND = IFNULL(vProductBrand, P.PRODUCT_BRAND),
			P.PRODUCT_QUANTITY = IFNULL(fQuantity, P.PRODUCT_QUANTITY),
			P.PRODUCT_PRICE = IFNULL(nProductPrice, P.PRODUCT_PRICE),
			P.PRODUCT_COST = IFNULL(nProductCost, P.PRODUCT_COST),
			P.PRODUCT_OFF = IFNULL(fOff, P.PRODUCT_OFF), 
			P.PRODUCT_CODE = IFNULL(vProductCode, P.PRODUCT_CODE),
			P.PRODUCT_STOCK = IFNULL(nProductStock, P.PRODUCT_STOCK),
			P.ID_CATEGORY = IFNULL(nIdCategory, P.ID_CATEGORY),
			P.IMG_SRC = IFNULL(vImgSrc, P.IMG_SRC),
			P.STOCK_ALERT = IFNULL(nStockAlert, P.STOCK_ALERT)
			WHERE P.ID_PRODUCT = nIdProduct;
		SET nError = 0;
		SET vMessage = 'Product updated succesfuly';
	ELSE
		SET nError = 1;
		SET vMessage = 'Product does not exists';
	END IF;
	SELECT nError AS ERROR, vMessage AS MESSAGE;
END;

CREATE PROCEDURE `SP_STORES_DELETE`(
								  IN  nIdStore		INT,
								  OUT nError		INT,
								  OUT vMessage		VARCHAR(100))
BEGIN
	DECLARE nRowCount INT DEFAULT 0;
	SELECT COUNT(*) INTO nRowCount FROM STORES S WHERE S.ID_STORE = nIdStore;
	IF nRowCount > 0 THEN
		/*
		 * FOREIGN KEYS MUST BE DELETED HERE
		 */
		DELETE FROM STORES S WHERE S.ID_STORE = nIdStore;
		SET nError = 0;
		SET vMessage  = 'Store deleted succesfuly'; 
	ELSE
		SET nError = 1;
		SET vMessage = 'Store does not exits'; 
	END IF;
	SELECT nError AS ERROR, vMessage AS MESSAGE;
END;

CREATE PROCEDURE `SP_STORES_INSERT`(IN  vStoreName	VARCHAR(100),
								  IN  vURL			VARCHAR(300),
								  IN  vMongoId		VARCHAR(24),
								  IN  nIdUser		INT,
								  OUT nError		INT,
								  OUT vMessage		VARCHAR(100))
BEGIN
	DECLARE nRowCount INT DEFAULT 0;
	SELECT COUNT(*) INTO nRowCount FROM STORES S WHERE LOWER(S.STORE_NAME) = LOWER(vStoreName);
	IF nRowCount > 0 THEN
		SET nError = 1;
		SET vMessage = 'Store name already exits';
	ELSE
		SET nRowCount = 0;
		SELECT COUNT(*) INTO nRowCount FROM STORES S WHERE LOWER(S.URL) = LOWER(vURL);
		IF nRowCount > 0 THEN
			SET nError = 2;
			SET vMessage = 'URL already exits';
		ELSE 
			INSERT INTO STORES(STORE_NAME, CREATED_AT, URL, MONGO_ID, ID_USER) VALUES (vStoreName, NOW(), vURL, vMongoId, nIdUser);
			SET nError = 0;
			SET vMessage = 'Store added succesfuly';
		END IF;
	END IF;
	SELECT nError AS ERROR, vMessage AS MESSAGE;
END;

CREATE PROCEDURE `SP_STORES_UPDATE`(IN  nIdStore		INT,
								  IN  vStoreName	VARCHAR(100),
								  IN  vURL			VARCHAR(300),
								  OUT nError		INT,
								  OUT vMessage		VARCHAR(100))
BEGIN
	DECLARE nRowCount INT DEFAULT 0;
	SELECT COUNT(*) INTO nRowCount FROM STORES S WHERE S.ID_STORE = nIdStore;
	IF nRowCount > 0 THEN
		UPDATE STORES S SET S.STORE_NAME = IFNULL(vStoreName, S.STORE_NAME), S.URL = IFNULL(vURL, S.URL) WHERE ID_STORE = nIdStore;
		SET nError = 0;
		SET vMessage  = 'Stored updated succesfuly'; 
	ELSE
		SET nError = 1;
		SET vMessage = 'Store does not exits'; 
	END IF;
	SELECT nError AS ERROR, vMessage AS MESSAGE;
END;

CREATE PROCEDURE `SP_USERS_AUTH`(IN  vUsername		VARCHAR(100),
								IN  vPass			VARCHAR(64),
								OUT nError			INT,
								OUT vMessage		VARCHAR(100))
BEGIN
	DECLARE nRowCount INT DEFAULT 0;

	SELECT ID_USER, USERNAME FROM USERS U WHERE U.USERNAME = vUsername AND U.PASSWORD = SHA2(vPass, 256);
	SELECT FOUND_ROWS() INTO nRowCount;
	IF(nRowCount>0) THEN 
		SET nError = 0;
		SET vMessage = 'Authentication OK';
	ELSE
		SET nError = 1;
		SET vMessage = 'Authentication FAIL';
	END IF;
END;

CREATE PROCEDURE `SP_USERS_INSERT`(IN  vUsername	VARCHAR(100),
								 IN  vEmail		VARCHAR(100),
								 IN  vPass		VARCHAR(64),
								 IN	 vMongoId	VARCHAR(24),
								 OUT nError		INT,
								 OUT vMessage	VARCHAR(100))
BEGIN
	#CHECK IF USERNAME EXISTS
	DECLARE nUserCount INT DEFAULT 0;
	DECLARE nRowCount INT DEFAULT 0;

	SELECT COUNT(*) INTO nUserCount FROM USERS U WHERE U.USERNAME = vUsername;
	#IF USER ALEADY EXITS
	IF(nUserCount>0) THEN
		SET nError = 1;
		SET vMessage = 'Username already exits';
	ELSE
		SELECT COUNT(*) INTO nUserCount FROM USERS U WHERE U.EMAIL = vEmail;
		IF(nUserCount>0) THEN
			SET nError := 2;
			SET vMessage = 'Email is associated with other account';
		ELSE
			INSERT INTO USERS(USERNAME, EMAIL, PASSWORD, MONGO_ID) VALUES(vUsername, vEmail, SHA2(vPass, 256), vMongoId);
			SET nError = 0;
			SET vMessage = 'User added correctly';
		END IF;
	END IF;
	SELECT nError AS ERROR, vMessage AS MESSAGE;
END;

CREATE PROCEDURE `SP_USERS_UPDATE`(IN nIdUser	INT UNSIGNED,
								 IN  vUsername		VARCHAR(100),
								 IN  vNewUsername	VARCHAR(100),
								 IN  vOldPass		VARCHAR(64),
								 IN  vNewPass		VARCHAR(64),
								 IN  vNewEmail		VARCHAR(100),
								 OUT nError			INT,
								 OUT vMessage		VARCHAR(100))
BEGIN
	DECLARE nRowCount INT DEFAULT 0;
	DECLARE nAuthError INT DEFAULT -1;
	DECLARE vAuthMessage VARCHAR(100) DEFAULT '';
	CALL SP_USERS_AUTH(vUsername, vOldPass, nAuthError, vAuthMessage);
	IF nAuthError = 0 THEN
		SELECT COUNT(*) INTO nRowCount FROM USERS U WHERE U.USERNAME = vNewUsername;
		IF(nRowCount>0) THEN
			SET nError = 2;
			SET vMessage = 'Username already exits';
		ELSE
			SELECT COUNT(*) INTO nRowCount FROM USERS U WHERE U.EMAIL = vNewEmail;
			IF(nRowCount>0) THEN
				SET nError = 3;
				SET vMessage = 'Email is associated wiht another account';
			ELSE
				UPDATE USERS U SET U.USERNAME = IFNULL(vNewUsername, U.USERNAME), U.PASSWORD = IFNULL(SHA2(vNewPass, 256), U.PASSWORD),
					U.EMAIL = IFNULL(vNewEmail, U.EMAIL) WHERE U.ID_USER = nIdUser;
				SET nError = 0;
				SET vMessage = 'User updated correctly';
			END IF;
		END IF;
	ELSE
		SET nError = nAuthError;
		SET vMessage = vAuthMessage;
	END IF;
	SELECT nError AS ERROR, vMessage AS MESSAGE;
END;

CREATE PROCEDURE `SP_USER_GET_ROLES`(IN  nIdUser		VARCHAR(100),
									  IN  nIdStore		INT,
									  OUT nError		INT,
									  OUT vMessage		VARCHAR(100))
BEGIN
	DECLARE nRowCount INT DEFAULT 0;

	SELECT UR.ID_USER, UR.ID_ROLE, ROLE_NAME, ID_STORE FROM USERS_ROLES UR INNER JOIN ROLES R ON (R.ID_ROLE = UR.ID_ROLE)
	WHERE UR.ID_USER = nIdUser AND UR.ID_STORE = nIdStore;
	SELECT FOUND_ROWS() INTO nRowCount;
	IF(nRowCount>0) THEN 
		SET nError = 0;
		SET vMessage = 'Has roles';
	ELSE
		SET nError = 1;
		SET vMessage = 'Has not roles';
	END IF;
END;

